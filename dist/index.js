'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _jscad_csg = require('@jscad/csg');

/*
 * Blob.js
 * See https://developer.mozilla.org/en-US/docs/Web/API/Blob
 *
 * Node and Browserify Compatible
 *
 * Copyright (c) 2015 by Z3 Dev (@zdev/www.z3dev.jp)
 * License: MIT License
 *
 * This implementation uses the Buffer class for all storage.
 * See https://nodejs.org/api/buffer.html
 *
 * URL.createObjectURL(blob)
 *
 * History:
 * 2015/07/02: 0.0.1: contributed to OpenJSCAD.org CLI openjscad
 */

function makeBlob (contents, options) {
  var blob = typeof window !== 'undefined' ? window.Blob : Blob;
  return blob
}

function Blob (contents, options) {
  var this$1 = this;

  // make the optional options non-optional
  options = options || {};
  // number of bytes
  this.size = 0; // contents, not allocation
  // media type
  this.type = '';
  // readability state (CLOSED: true, OPENED: false)
  this.isClosed = false;
  // encoding of given strings
  this.encoding = 'utf8';
  // storage
  this.buffer = null;
  this.length = 32e+6; // allocation, not contents

  if (!contents) { return }
  if (!Array.isArray(contents)) { return }

  // process options if any
  if (options.type) {
    // TBD if type contains any chars outside range U+0020 to U+007E, then set type to the empty string
    // Convert every character in type to lowercase
    this.type = options.type.toLowerCase();
  }
  if (options.endings) {
    // convert the EOL on strings
  }
  if (options.encoding) {
    this.encoding = options.encoding.toLowerCase();
  }
  if (options.length) {
    this.length = options.length;
  }

  var wbytes;
  var object;
  // convert the contents (String, ArrayBufferView, ArrayBuffer, Blob)
  this.buffer = new Buffer(this.length);
  var index = 0;
  for (index = 0; index < contents.length; index++) {
    switch (typeof (contents[index])) {
      case 'string':
        wbytes = this$1.buffer.write(contents[index], this$1.size, this$1.encoding);
        this$1.size = this$1.size + wbytes;
        break
      case 'object':
        object = contents[index]; // this should be a reference to an object
        if (Buffer.isBuffer(object)) {
        }
        if (object instanceof ArrayBuffer) {
          var view = new DataView(object);
          var bindex = 0;
          for (bindex = 0; bindex < object.byteLength; bindex++) {
            var xbyte = view.getUint8(bindex);
            wbytes = this$1.buffer.writeUInt8(xbyte, this$1.size, false);
            this$1.size++;
          }
        }
        break
      default:
        break
    }
  }
  return this
}

Blob.prototype = {
  asBuffer: function () {
    return this.buffer.slice(0, this.size)
  },

  slice: function (start, end, type) {
    start = start || 0;
    end = end || this.size;
    type = type || '';
    return new Blob()
  },

  close: function () {
    // if state of context objext is already CLOSED then return
    if (this.isClosed) { return }
    // set the readbility state of the context object to CLOSED and remove storage
    this.isClosed = true;
  },

  toString: function () {
    return 'blob blob blob'
  }
};

function revokeBlobUrl (url) {
  if (window.URL) { window.URL.revokeObjectURL(url); }
  else if (window.webkitURL) { window.webkitURL.revokeObjectURL(url); }
  else { throw new Error("Your browser doesn't support window.URL") }
}

var Blob$1 = makeBlob();

function CAGToDxf (cagObject) {
  var paths = cagObject.getOutlinePaths();
  return PathsToDxf(paths)
}

function PathsToDxf (paths) {
  var str = '999\nDXF generated by OpenJsCad\n';
  str += '  0\nSECTION\n  2\nHEADER\n';
  str += '  0\nENDSEC\n';
  str += '  0\nSECTION\n  2\nTABLES\n';
  str += '  0\nTABLE\n  2\nLTYPE\n  70\n1\n';
  str += '  0\nLTYPE\n  2\nCONTINUOUS\n  3\nSolid Line\n  72\n65\n  73\n0\n  40\n0.0\n';
  str += '  0\nENDTAB\n';
  str += '  0\nTABLE\n  2\nLAYER\n  70\n1\n';
  str += '  0\nLAYER\n  2\nOpenJsCad\n  62\n7\n  6\ncontinuous\n';
  str += '  0\nENDTAB\n';
  str += '  0\nTABLE\n  2\nSTYLE\n  70\n0\n  0\nENDTAB\n';
  str += '  0\nTABLE\n  2\nVIEW\n  70\n0\n  0\nENDTAB\n';
  str += '  0\nENDSEC\n';
  str += '  0\nSECTION\n  2\nBLOCKS\n';
  str += '  0\nENDSEC\n';
  str += '  0\nSECTION\n  2\nENTITIES\n';
  paths.map(function (path) {
    var numpoints_closed = path.points.length + (path.closed ? 1 : 0);
    str += '  0\nLWPOLYLINE\n  8\nOpenJsCad\n  90\n' + numpoints_closed + '\n  70\n' + (path.closed ? 1 : 0) + '\n';
    for (var pointindex = 0; pointindex < numpoints_closed; pointindex++) {
      var pointindexwrapped = pointindex;
      if (pointindexwrapped >= path.points.length) { pointindexwrapped -= path.points.length; }
      var point = path.points[pointindexwrapped];
      str += ' 10\n' + point.x + '\n 20\n' + point.y + '\n 30\n0.0\n';
    }
  });
  str += '  0\nENDSEC\n  0\nEOF\n';
  return new Blob$1([str], {
    type: 'application/dxf'
  })
}

var Blob$2 = makeBlob();

function CAGToJson (CAG) {
  var str = '{ "type": "cag","sides": [';
  var comma = '';
  CAG.sides.map(
    function (side) {
      str += comma;
      str += JSON.stringify(side);
      comma = ',';
    }
  );
  str += '] }';
  return new Blob$2([str], {
    type: 'application/json'
  })
}

var Blob$3 = makeBlob();

function CAGToSvg (cagObject) {
  var decimals = 1000;

  // mirror the CAG about the X axis in order to generate paths into the POSITIVE direction
  var plane = new _jscad_csg.CSG.Plane(_jscad_csg.CSG.Vector3D.Create(0, 1, 0), 0);
  var cag = cagObject.transform(_jscad_csg.CSG.Matrix4x4.mirroring(plane));

  var bounds = cag.getBounds();
  var paths = cag.getOutlinePaths();
  var width = Math.round((bounds[1].x - bounds[0].x) * decimals) / decimals;
  var height = Math.round((bounds[1].y - bounds[0].y) * decimals) / decimals;
  var svg = '<?xml version="1.0" encoding="UTF-8"?>\n';
  svg += '<!-- Generated by OpenJSCAD.org -->\n';
  svg += '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">\n';
  svg += '<svg width="' + width + 'mm" height="' + height + 'mm" viewBox="0 0 ' + width + ' ' + height + '" version="1.1" baseProfile="tiny" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n';
  svg += PathsToSvg(paths, bounds);
  svg += '</svg>';
  return new Blob$3([svg], {
    type: 'image/svg+xml'
  })
}

function PathsToSvg (paths, bounds) {
  // calculate offsets in order to create paths orientated from the 0,0 axis
  var xoffset = 0 - bounds[0].x;
  var yoffset = 0 - bounds[0].y;
  var str = '<g>\n';
  paths.map(function (path) {
    str += '<path d="';
    // FIXME add fill color when CAG has support for colors
    var numpoints_closed = path.points.length + (path.closed ? 1 : 0);
    for (var pointindex = 0; pointindex < numpoints_closed; pointindex++) {
      var pointindexwrapped = pointindex;
      if (pointindexwrapped >= path.points.length) { pointindexwrapped -= path.points.length; }
      var point = path.points[pointindexwrapped];
      if (pointindex > 0) {
        str += 'L' + (point.x + xoffset) + ' ' + (point.y + yoffset);
      } else {
        str += 'M' + (point.x + xoffset) + ' ' + (point.y + yoffset);
      }
    }
    str += '"/>\n';
  });
  str += '</g>\n';
  return str
}

var Blob$4 = makeBlob();

function CSGToAMF (CSG, m) {
  var result = '<?xml version="1.0" encoding="UTF-8"?>\n<amf' + (m && m.unit ? ' unit="+m.unit"' : '') + '>\n';
  for (var k in m) {
    result += '<metadata type="' + k + '">' + m[k] + '</metadata>\n';
  }
  result += '<object id="0">\n<mesh>\n<vertices>\n';

  CSG.polygons.map(function (p) { // first we dump all vertices of all polygons
    for (var i = 0; i < p.vertices.length; i++) {
      result += CSGVertextoAMFString(p.vertices[i]);
    }
  });
  result += '</vertices>\n';

  var n = 0;
  CSG.polygons.map(function (p) { // then we dump all polygons
    result += '<volume>\n';
    if (p.vertices.length < 3)
      { return }
    var color = null;
    if (p.shared && p.shared.color) {
      color = p.shared.color;
    } else if (p.color) {
      color = p.color;
    }
    if (color != null) {
      if (color.length < 4) { color.push(1.); }
      result += '<color><r>' + color[0] + '</r><g>' + color[1] + '</g><b>' + color[2] + '</b><a>' + color[3] + '</a></color>';
    }

    for (var i = 0; i < p.vertices.length - 2; i++) { // making sure they are all triangles (triangular polygons)
      result += '<triangle>';
      result += '<v1>' + (n) + '</v1>';
      result += '<v2>' + (n + i + 1) + '</v2>';
      result += '<v3>' + (n + i + 2) + '</v3>';
      result += '</triangle>\n';
    }
    n += p.vertices.length;
    result += '</volume>\n';
  });
  result += '</mesh>\n</object>\n';
  result += '</amf>\n';

  return new Blob$4([result], {
    type: 'application/amf+xml'
  })
}

function CSGVectortoAMFString(v){
  return '<x>' + v._x + '</x><y>' + v._y + '</y><z>' + v._z + '</z>'
}

function CSGVertextoAMFString(vertex){
  return '<vertex><coordinates>' + CSGVectortoAMFString(vertex.pos) + '</coordinates></vertex>\n'
}
/*
CSG.Vector3D.prototype.toAMFString = function () {
  return '<x>' + this._x + '</x><y>' + this._y + '</y><z>' + this._z + '</z>'
}

CSG.Vertex.prototype.toAMFString = function () {
  return '<vertex><coordinates>' + this.pos.toAMFString() + '</coordinates></vertex>\n'
}*/

var Blob$5 = makeBlob();

function CSGToJson () {
  var str = '{ "type": "csg","polygons": [';
  var comma = '';
  CSG.polygons.map(
    function (polygon) {
      str += comma;
      str += JSON.stringify(polygon);
      comma = ',';
    }
  );
  str += '],';
  str += '"isCanonicalized": ' + JSON.stringify(this.isCanonicalized) + ',';
  str += '"isRetesselated": ' + JSON.stringify(this.isRetesselated);
  str += '}';
  return new Blob$5([str], {
    type: 'application/json'
  })
}

var Blob$6 = makeBlob();

function CSGToStla (CSG) {
  var result = 'solid csg.js\n';
  CSG.polygons.map(function (p) {
    result += CSGPolygontoStlString(p);
  });
  result += 'endsolid csg.js\n';
  return new Blob$6([result], {
    type: 'application/sla'
  })
}

function CSGVector3DtoStlString (v) {
  return v._x + ' ' + v._y + ' ' + v._z
}

function CSGVertextoStlString (vertex) {
  return 'vertex ' + CSGVector3DtoStlString(vertex.pos) + '\n'
}

function CSGPolygontoStlString (polygon) {
  var result = '';
  if (polygon.vertices.length >= 3) // should be!
  {
    // STL requires triangular polygons. If our polygon has more vertices, create
    // multiple triangles:
    var firstVertexStl = CSGVertextoStlString(polygon.vertices[0]);
    for (var i = 0; i < polygon.vertices.length - 2; i++) {
      result += 'facet normal ' + CSGVector3DtoStlString(polygon.plane.normal) + '\nouter loop\n';
      result += firstVertexStl;
      result += CSGVertextoStlString(polygon.vertices[i + 1]);
      result += CSGVertextoStlString(polygon.vertices[i + 2]);
      result += 'endloop\nendfacet\n';
    }
  }
  return result
}

var Blob$7 = makeBlob();

// see http://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL
function CSGToStlb (CSG) {
  // first check if the host is little-endian:
  var buffer = new ArrayBuffer(4);
  var int32buffer = new Int32Array(buffer, 0, 1);
  var int8buffer = new Int8Array(buffer, 0, 4);
  int32buffer[0] = 0x11223344;
  if (int8buffer[0] != 0x44) {
    throw new Error('Binary STL output is currently only supported on little-endian (Intel) processors')
  }

  var numtriangles = 0;
  CSG.polygons.map(function (p) {
    var numvertices = p.vertices.length;
    var thisnumtriangles = (numvertices >= 3) ? numvertices - 2 : 0;
    numtriangles += thisnumtriangles;
  });
  var headerarray = new Uint8Array(80);
  for (var i = 0; i < 80; i++) {
    headerarray[i] = 65;
  }
  var ar1 = new Uint32Array(1);
  ar1[0] = numtriangles;
  // write the triangles to allTrianglesBuffer:
  var allTrianglesBuffer = new ArrayBuffer(50 * numtriangles);
  var allTrianglesBufferAsInt8 = new Int8Array(allTrianglesBuffer);
  // a tricky problem is that a Float32Array must be aligned at 4-byte boundaries (at least in certain browsers)
  // while each triangle takes 50 bytes. Therefore we write each triangle to a temporary buffer, and copy that
  // into allTrianglesBuffer:
  var triangleBuffer = new ArrayBuffer(50);
  var triangleBufferAsInt8 = new Int8Array(triangleBuffer);
  // each triangle consists of 12 floats:
  var triangleFloat32array = new Float32Array(triangleBuffer, 0, 12);
  // and one uint16:
  var triangleUint16array = new Uint16Array(triangleBuffer, 48, 1);
  var byteoffset = 0;
  CSG.polygons.map(function (p) {
    var numvertices = p.vertices.length;
    for (var i = 0; i < numvertices - 2; i++) {
      var normal = p.plane.normal;
      triangleFloat32array[0] = normal._x;
      triangleFloat32array[1] = normal._y;
      triangleFloat32array[2] = normal._z;
      var arindex = 3;
      for (var v = 0; v < 3; v++) {
        var vv = v + ((v > 0) ? i : 0);
        var vertexpos = p.vertices[vv].pos;
        triangleFloat32array[arindex++] = vertexpos._x;
        triangleFloat32array[arindex++] = vertexpos._y;
        triangleFloat32array[arindex++] = vertexpos._z;
      }
      triangleUint16array[0] = 0;
      // copy the triangle into allTrianglesBuffer:
      allTrianglesBufferAsInt8.set(triangleBufferAsInt8, byteoffset);
      byteoffset += 50;
    }
  });
  return new Blob$7([headerarray.buffer, ar1.buffer, allTrianglesBuffer], {
    type: 'application/sla'
  })
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;//\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0;//tag name offerring
var S_ATTR = 1;//attr name offerring 
var S_ATTR_SPACE=2;//attr name end and space offer
var S_EQ = 3;//=space?
var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
var S_ATTR_END = 5;//attr value end and no space(quot end)
var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7;//closed el<el />

function XMLReader(){
	
}

XMLReader.prototype = {
	parse:function(source,defaultNSMap,entityMap){
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap ,defaultNSMap = {});
		parse(source,defaultNSMap,entityMap,
				domBuilder,this.errorHandler);
		domBuilder.endDocument();
	}
};
function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
	function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10)
				, surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a){
		var k = a.slice(1,-1);
		if(k in entityMap){
			return entityMap[k]; 
		}else if(k.charAt(0) === '#'){
			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
		}else{
			errorHandler.error('entity not found:'+a);
			return a;
		}
	}
	function appendText(end){//has some bugs
		if(end>start){
			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
			locator&&position(start);
			domBuilder.characters(xt,0,end-start);
			start = end;
		}
	}
	function position(p,m){
		while(p>=lineEnd && (m = linePattern.exec(source))){
			lineStart = m.index;
			lineEnd = lineStart + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = p-lineStart+1;
	}
	var lineStart = 0;
	var lineEnd = 0;
	var linePattern = /.*(?:\r\n?|\n)|.*$/g;
	var locator = domBuilder.locator;
	
	var parseStack = [{currentNSMap:defaultNSMapCopy}];
	var closeMap = {};
	var start = 0;
	while(true){
		try{
			var tagStart = source.indexOf('<',start);
			if(tagStart<0){
				if(!source.substr(start).match(/^\s*$/)){
					var doc = domBuilder.doc;
	    			var text = doc.createTextNode(source.substr(start));
	    			doc.appendChild(text);
	    			domBuilder.currentElement = text;
				}
				return;
			}
			if(tagStart>start){
				appendText(tagStart);
			}
			switch(source.charAt(tagStart+1)){
			case '/':
				var end = source.indexOf('>',tagStart+3);
				var tagName = source.substring(tagStart+2,end);
				var config = parseStack.pop();
				if(end<0){
					
	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
	        		//console.error('#@@@@@@'+tagName)
	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
	        		end = tagStart+1+tagName.length;
	        	}else if(tagName.match(/\s</)){
	        		tagName = tagName.replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
	        		end = tagStart+1+tagName.length;
				}
				//console.error(parseStack.length,parseStack)
				//console.error(config);
				var localNSMap = config.localNSMap;
				var endMatch = config.tagName == tagName;
				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase();
		        if(endIgnoreCaseMach){
		        	domBuilder.endElement(config.uri,config.localName,tagName);
					if(localNSMap){
						for(var prefix in localNSMap){
							domBuilder.endPrefixMapping(prefix) ;
						}
					}
					if(!endMatch){
		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName );
					}
		        }else{
		        	parseStack.push(config);
		        }
				
				end++;
				break;
				// end elment
			case '?':// <?...?>
				locator&&position(tagStart);
				end = parseInstruction(source,tagStart,domBuilder);
				break;
			case '!':// <!doctype,<![CDATA,<!--
				locator&&position(tagStart);
				end = parseDCC(source,tagStart,domBuilder,errorHandler);
				break;
			default:
				locator&&position(tagStart);
				var el = new ElementAttributes();
				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
				//elStartEnd
				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
				var len = el.length;
				
				
				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
					el.closed = true;
					if(!entityMap.nbsp){
						errorHandler.warning('unclosed xml attribute');
					}
				}
				if(locator && len){
					var locator2 = copyLocator(locator,{});
					//try{//attribute position fixed
					for(var i = 0;i<len;i++){
						var a = el[i];
						position(a.offset);
						a.locator = copyLocator(locator,{});
					}
					//}catch(e){console.error('@@@@@'+e)}
					domBuilder.locator = locator2;
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el);
					}
					domBuilder.locator = locator;
				}else{
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el);
					}
				}
				
				
				
				if(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){
					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder);
				}else{
					end++;
				}
			}
		}catch(e){
			errorHandler.error('element parse error: '+e);
			//errorHandler.error('element parse error: '+e);
			end = -1;
			//throw e;
		}
		if(end>start){
			start = end;
		}else{
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(Math.max(tagStart,start)+1);
		}
	}
}
function copyLocator(f,t){
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG;//status
	while(true){
		var c = source.charAt(p);
		switch(c){
		case '=':
			if(s === S_ATTR){//attrName
				attrName = source.slice(start,p);
				s = S_EQ;
			}else if(s === S_ATTR_SPACE){
				s = S_EQ;
			}else{
				//fatalError: equal must after attrName or space after attrName
				throw new Error('attribute equal must after attrName');
			}
			break;
		case '\'':
		case '"':
			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
				){//equal
				if(s === S_ATTR){
					errorHandler.warning('attribute value must after "="');
					attrName = source.slice(start,p);
				}
				start = p+1;
				p = source.indexOf(c,start);
				if(p>0){
					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					el.add(attrName,value,start-1);
					s = S_ATTR_END;
				}else{
					//fatalError: no end quot match
					throw new Error('attribute value no end \''+c+'\' match');
				}
			}else if(s == S_ATTR_NOQUOT_VALUE){
				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
				//console.log(attrName,value,start,p)
				el.add(attrName,value,start);
				//console.dir(el)
				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
				start = p+1;
				s = S_ATTR_END;
			}else{
				//fatalError: no equal before
				throw new Error('attribute value must after "="');
			}
			break;
		case '/':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				s =S_TAG_CLOSE;
				el.closed = true;
			case S_ATTR_NOQUOT_VALUE:
			case S_ATTR:
			case S_ATTR_SPACE:
				break;
			//case S_EQ:
			default:
				throw new Error("attribute invalid close char('/')")
			}
			break;
		case ''://end document
			//throw new Error('unexpected end of input')
			errorHandler.error('unexpected end of input');
			if(s == S_TAG){
				el.setTagName(source.slice(start,p));
			}
			return p;
		case '>':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				break;//normal
			case S_ATTR_NOQUOT_VALUE://Compatible state
			case S_ATTR:
				value = source.slice(start,p);
				if(value.slice(-1) === '/'){
					el.closed  = true;
					value = value.slice(0,-1);
				}
			case S_ATTR_SPACE:
				if(s === S_ATTR_SPACE){
					value = attrName;
				}
				if(s == S_ATTR_NOQUOT_VALUE){
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value.replace(/&#?\w+;/g,entityReplacer),start);
				}else{
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!');
					}
					el.add(value,value,start);
				}
				break;
			case S_EQ:
				throw new Error('attribute value missed!!');
			}
//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
			return p;
		/*xml space '\x20' | #x9 | #xD | #xA; */
		case '\u0080':
			c = ' ';
		default:
			if(c<= ' '){//space
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));//tagName
					s = S_TAG_SPACE;
					break;
				case S_ATTR:
					attrName = source.slice(start,p);
					s = S_ATTR_SPACE;
					break;
				case S_ATTR_NOQUOT_VALUE:
					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value,start);
				case S_ATTR_END:
					s = S_TAG_SPACE;
					break;
				//case S_TAG_SPACE:
				//case S_EQ:
				//case S_ATTR_SPACE:
				//	void();break;
				//case S_TAG_CLOSE:
					//ignore warning
				}
			}else{//not space
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
				switch(s){
				//case S_TAG:void();break;
				//case S_ATTR:void();break;
				//case S_ATTR_NOQUOT_VALUE:void();break;
				case S_ATTR_SPACE:
					var tagName =  el.tagName;
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!');
					}
					el.add(attrName,attrName,start);
					start = p;
					s = S_ATTR;
					break;
				case S_ATTR_END:
					errorHandler.warning('attribute space is required"'+attrName+'"!!');
				case S_TAG_SPACE:
					s = S_ATTR;
					start = p;
					break;
				case S_EQ:
					s = S_ATTR_NOQUOT_VALUE;
					start = p;
					break;
				case S_TAG_CLOSE:
					throw new Error("elements closed character '/' and '>' must be connected to");
				}
			}
		}//end outer switch
		//console.log('p++',p)
		p++;
	}
}
/**
 * @return true if has new namespace define
 */
function appendElement(el,domBuilder,currentNSMap){
	var tagName = el.tagName;
	var localNSMap = null;
	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while(i--){
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if(nsp>0){
			var prefix = a.prefix = qName.slice(0,nsp);
			var localName = qName.slice(nsp+1);
			var nsPrefix = prefix === 'xmlns' && localName;
		}else{
			localName = qName;
			prefix = null;
			nsPrefix = qName === 'xmlns' && '';
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName ;
		//prefix == null for no ns prefix attribute 
		if(nsPrefix !== false){//hack!!
			if(localNSMap == null){
				localNSMap = {};
				//console.log(currentNSMap,0)
				_copy(currentNSMap,currentNSMap={});
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = 'http://www.w3.org/2000/xmlns/';
			domBuilder.startPrefixMapping(nsPrefix, value); 
		}
	}
	var i = el.length;
	while(i--){
		a = el[i];
		var prefix = a.prefix;
		if(prefix){//no prefix attribute has no namespace
			if(prefix === 'xml'){
				a.uri = 'http://www.w3.org/XML/1998/namespace';
			}if(prefix !== 'xmlns'){
				a.uri = currentNSMap[prefix || ''];
				
				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if(nsp>0){
		prefix = el.prefix = tagName.slice(0,nsp);
		localName = el.localName = tagName.slice(nsp+1);
	}else{
		prefix = null;//important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns,localName,tagName,el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if(el.closed){
		domBuilder.endElement(ns,localName,tagName);
		if(localNSMap){
			for(prefix in localNSMap){
				domBuilder.endPrefixMapping(prefix); 
			}
		}
	}else{
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		//parseStack.push(el);
		return true;
	}
}
function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
	if(/^(?:script|textarea)$/i.test(tagName)){
		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
		var text = source.substring(elStartEnd+1,elEndStart);
		if(/[&<]/.test(text)){
			if(/^script$/i.test(tagName)){
				//if(!/\]\]>/.test(text)){
					//lexHandler.startCDATA();
					domBuilder.characters(text,0,text.length);
					//lexHandler.endCDATA();
					return elEndStart;
				//}
			}//}else{//text area
				text = text.replace(/&#?\w+;/g,entityReplacer);
				domBuilder.characters(text,0,text.length);
				return elEndStart;
			//}
			
		}
	}
	return elStartEnd+1;
}
function fixSelfClosed(source,elStartEnd,tagName,closeMap){
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if(pos == null){
		//console.log(tagName)
		pos =  source.lastIndexOf('</'+tagName+'>');
		if(pos<elStartEnd){//忘记闭合
			pos = source.lastIndexOf('</'+tagName);
		}
		closeMap[tagName] =pos;
	}
	return pos<elStartEnd;
	//} 
}
function _copy(source,target){
	for(var n in source){target[n] = source[n];}
}
function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
	var next= source.charAt(start+2);
	switch(next){
	case '-':
		if(source.charAt(start + 3) === '-'){
			var end = source.indexOf('-->',start+4);
			//append comment source.substring(4,end)//<!--
			if(end>start){
				domBuilder.comment(source,start+4,end-start-4);
				return end+3;
			}else{
				errorHandler.error("Unclosed comment");
				return -1;
			}
		}else{
			//error
			return -1;
		}
	default:
		if(source.substr(start+3,6) == 'CDATA['){
			var end = source.indexOf(']]>',start+9);
			domBuilder.startCDATA();
			domBuilder.characters(source,start+9,end-start-9);
			domBuilder.endCDATA(); 
			return end+3;
		}
		//<!DOCTYPE
		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
		var matchs = split(source,start);
		var len = matchs.length;
		if(len>1 && /!doctype/i.test(matchs[0][0])){
			var name = matchs[1][0];
			var pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0];
			var sysid = len>4 && matchs[4][0];
			var lastMatch = matchs[len-1];
			domBuilder.startDTD(name,pubid && pubid.replace(/^(['"])(.*?)\1$/,'$2'),
					sysid && sysid.replace(/^(['"])(.*?)\1$/,'$2'));
			domBuilder.endDTD();
			
			return lastMatch.index+lastMatch[0].length
		}
	}
	return -1;
}



function parseInstruction(source,start,domBuilder){
	var end = source.indexOf('?>',start);
	if(end){
		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if(match){
			var len = match[0].length;
			domBuilder.processingInstruction(match[1], match[2]) ;
			return end+2;
		}else{//error
			return -1;
		}
	}
	return -1;
}

/**
 * @param source
 */
function ElementAttributes(source){
	
}
ElementAttributes.prototype = {
	setTagName:function(tagName){
		if(!tagNamePattern.test(tagName)){
			throw new Error('invalid tagName:'+tagName)
		}
		this.tagName = tagName;
	},
	add:function(qName,value,offset){
		if(!tagNamePattern.test(qName)){
			throw new Error('invalid attribute:'+qName)
		}
		this[this.length++] = {qName:qName,value:value,offset:offset};
	},
	length:0,
	getLocalName:function(i){return this[i].localName},
	getLocator:function(i){return this[i].locator},
	getQName:function(i){return this[i].qName},
	getURI:function(i){return this[i].uri},
	getValue:function(i){return this[i].value}
//	,getIndex:function(uri, localName)){
//		if(localName){
//			
//		}else{
//			var qName = uri
//		}
//	},
//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
//	getType:function(uri,localName){}
//	getType:function(i){},
};




function _set_proto_(thiz,parent){
	thiz.__proto__ = parent;
	return thiz;
}
if(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){
	_set_proto_ = function(thiz,parent){
		function p(){}
		p.prototype = parent;
		p = new p();
		for(parent in thiz){
			p[parent] = thiz[parent];
		}
		return p;
	};
}

function split(source,start){
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source);//skip <
	while(match = reg.exec(source)){
		buf.push(match);
		if(match[1]){ return buf; }
	}
}

var XMLReader_1 = XMLReader;

var sax = {
	XMLReader: XMLReader_1
};

/*
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 */

function copy(src,dest){
	for(var p in src){
		dest[p] = src[p];
	}
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends(Class,Super){
	var pt = Class.prototype;
	if(Object.create){
		var ppt = Object.create(Super.prototype);
		pt.__proto__ = ppt;
	}
	if(!(pt instanceof Super)){
		function t(){}
		t.prototype = Super.prototype;
		t = new t();
		copy(pt,t);
		Class.prototype = pt = t;
	}
	if(pt.constructor != Class){
		if(typeof Class != 'function'){
			console.error("unknow Class:"+Class);
		}
		pt.constructor = Class;
	}
}
var htmlns = 'http://www.w3.org/1999/xhtml';
// Node Types
var NodeType = {};
var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

// ExceptionCode
var ExceptionCode = {};
var ExceptionMessage = {};
var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
//level2
var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);


function DOMException(code, message) {
	if(message instanceof Error){
		var error = message;
	}else{
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if(Error.captureStackTrace) { Error.captureStackTrace(this, DOMException); }
	}
	error.code = code;
	if(message) { this.message = this.message + ": " + message; }
	return error;
}
DOMException.prototype = Error.prototype;
copy(ExceptionCode,DOMException);
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {
}
NodeList.prototype = {
	/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */
	length:0, 
	/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long 
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
	 */
	item: function(index) {
		return this[index] || null;
	},
	toString:function(isHTML,nodeFilter){
		var this$1 = this;

		for(var buf = [], i = 0;i<this.length;i++){
			serializeToString(this$1[i],buf,isHTML,nodeFilter);
		}
		return buf.join('');
	}
};
function LiveNodeList(node,refresh){
	this._node = node;
	this._refresh = refresh;
	_updateLiveList(this);
}
function _updateLiveList(list){
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if(list._inc != inc){
		var ls = list._refresh(list._node);
		//console.log(ls.length)
		__set__(list,'length',ls.length);
		copy(ls,list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function(i){
	_updateLiveList(this);
	return this[i];
};

_extends(LiveNodeList,NodeList);
/**
 * 
 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */
function NamedNodeMap() {
}

function _findNodeIndex(list,node){
	var i = list.length;
	while(i--){
		if(list[i] === node){return i}
	}
}

function _addNamedNode(el,list,newAttr,oldAttr){
	if(oldAttr){
		list[_findNodeIndex(list,oldAttr)] = newAttr;
	}else{
		list[list.length++] = newAttr;
	}
	if(el){
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if(doc){
			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
			_onAddAttribute(doc,el,newAttr);
		}
	}
}
function _removeNamedNode(el,list,attr){
	//console.log('remove attr:'+attr)
	var i = _findNodeIndex(list,attr);
	if(i>=0){
		var lastIndex = list.length-1;
		while(i<lastIndex){
			list[i] = list[++i];
		}
		list.length = lastIndex;
		if(el){
			var doc = el.ownerDocument;
			if(doc){
				_onRemoveAttribute(doc,el,attr);
				attr.ownerElement = null;
			}
		}
	}else{
		throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
	}
}
NamedNodeMap.prototype = {
	length:0,
	item:NodeList.prototype.item,
	getNamedItem: function(key) {
		var this$1 = this;

//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
		//console.log()
		var i = this.length;
		while(i--){
			var attr = this$1[i];
			//console.log(attr.nodeName,key)
			if(attr.nodeName == key){
				return attr;
			}
		}
	},
	setNamedItem: function(attr) {
		var el = attr.ownerElement;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement, oldAttr;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
		
		
	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
	
	//for level2
	removeNamedItemNS:function(namespaceURI,localName){
		var attr = this.getNamedItemNS(namespaceURI,localName);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
	},
	getNamedItemNS: function(namespaceURI, localName) {
		var this$1 = this;

		var i = this.length;
		while(i--){
			var node = this$1[i];
			if(node.localName == localName && node.namespaceURI == namespaceURI){
				return node;
			}
		}
		return null;
	}
};
/**
 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
 */
function DOMImplementation(/* Object */ features) {
	var this$1 = this;

	this._features = {};
	if (features) {
		for (var feature in features) {
			 this$1._features = features[feature];
		}
	}
}

DOMImplementation.prototype = {
	hasFeature: function(/* string */ feature, /* string */ version) {
		var versions = this._features[feature.toLowerCase()];
		if (versions && (!version || version in versions)) {
			return true;
		} else {
			return false;
		}
	},
	// Introduced in DOM Level 2:
	createDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
		var doc = new Document();
		doc.implementation = this;
		doc.childNodes = new NodeList();
		doc.doctype = doctype;
		if(doctype){
			doc.appendChild(doctype);
		}
		if(qualifiedName){
			var root = doc.createElementNS(namespaceURI,qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	// Introduced in DOM Level 2:
	createDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId;
		node.systemId = systemId;
		// Introduced in DOM Level 2:
		//readonly attribute DOMString        internalSubset;
		
		//TODO:..
		//  readonly attribute NamedNodeMap     entities;
		//  readonly attribute NamedNodeMap     notations;
		return node;
	}
};


/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {
}

Node.prototype = {
	firstChild : null,
	lastChild : null,
	previousSibling : null,
	nextSibling : null,
	attributes : null,
	parentNode : null,
	childNodes : null,
	ownerDocument : null,
	nodeValue : null,
	namespaceURI : null,
	prefix : null,
	localName : null,
	// Modified in DOM Level 2:
	insertBefore:function(newChild, refChild){//raises 
		return _insertBefore(this,newChild,refChild);
	},
	replaceChild:function(newChild, oldChild){//raises 
		this.insertBefore(newChild,oldChild);
		if(oldChild){
			this.removeChild(oldChild);
		}
	},
	removeChild:function(oldChild){
		return _removeChild(this,oldChild);
	},
	appendChild:function(newChild){
		return this.insertBefore(newChild,null);
	},
	hasChildNodes:function(){
		return this.firstChild != null;
	},
	cloneNode:function(deep){
		return cloneNode(this.ownerDocument||this,this,deep);
	},
	// Modified in DOM Level 2:
	normalize:function(){
		var this$1 = this;

		var child = this.firstChild;
		while(child){
			var next = child.nextSibling;
			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
				this$1.removeChild(next);
				child.appendData(next.data);
			}else{
				child.normalize();
				child = next;
			}
		}
	},
  	// Introduced in DOM Level 2:
	isSupported:function(feature, version){
		return this.ownerDocument.implementation.hasFeature(feature,version);
	},
    // Introduced in DOM Level 2:
    hasAttributes:function(){
    	return this.attributes.length>0;
    },
    lookupPrefix:function(namespaceURI){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			for(var n in map){
    				if(map[n] == namespaceURI){
    					return n;
    				}
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI:function(prefix){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			if(prefix in map){
    				return map[prefix] ;
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace:function(namespaceURI){
    	var prefix = this.lookupPrefix(namespaceURI);
    	return prefix == null;
    }
};


function _xmlEncoder(c){
	return c == '<' && '&lt;' ||
         c == '>' && '&gt;' ||
         c == '&' && '&amp;' ||
         c == '"' && '&quot;' ||
         '&#'+c.charCodeAt()+';'
}


copy(NodeType,Node);
copy(NodeType,Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node,callback){
	if(callback(node)){
		return true;
	}
	if(node = node.firstChild){
		do{
			if(_visitNode(node,callback)){return true}
        }while(node=node.nextSibling)
    }
}



function Document(){
}
function _onAddAttribute(doc,el,newAttr){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value;
	}
}
function _onRemoveAttribute(doc,el,newAttr,remove){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		delete el._nsMap[newAttr.prefix?newAttr.localName:''];
	}
}
function _onUpdateChild(doc,el,newChild){
	if(doc && doc._inc){
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if(newChild){
			cs[cs.length++] = newChild;
		}else{
			//console.log(1)
			var child = el.firstChild;
			var i = 0;
			while(child){
				cs[i++] = child;
				child =child.nextSibling;
			}
			cs.length = i;
		}
	}
}

/**
 * attributes;
 * children;
 * 
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */
function _removeChild(parentNode,child){
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if(previous){
		previous.nextSibling = next;
	}else{
		parentNode.firstChild = next;
	}
	if(next){
		next.previousSibling = previous;
	}else{
		parentNode.lastChild = previous;
	}
	_onUpdateChild(parentNode.ownerDocument,parentNode);
	return child;
}
/**
 * preformance key(refChild == null)
 */
function _insertBefore(parentNode,newChild,nextChild){
	var cp = newChild.parentNode;
	if(cp){
		cp.removeChild(newChild);//remove and update
	}
	if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
		var newFirst = newChild.firstChild;
		if (newFirst == null) {
			return newChild;
		}
		var newLast = newChild.lastChild;
	}else{
		newFirst = newLast = newChild;
	}
	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = nextChild;
	
	
	if(pre){
		pre.nextSibling = newFirst;
	}else{
		parentNode.firstChild = newFirst;
	}
	if(nextChild == null){
		parentNode.lastChild = newLast;
	}else{
		nextChild.previousSibling = newLast;
	}
	do{
		newFirst.parentNode = parentNode;
	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
	_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
	//console.log(parentNode.lastChild.nextSibling == null)
	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
		newChild.firstChild = newChild.lastChild = null;
	}
	return newChild;
}
function _appendSingleChild(parentNode,newChild){
	var cp = newChild.parentNode;
	if(cp){
		var pre = parentNode.lastChild;
		cp.removeChild(newChild);//remove and update
		var pre = parentNode.lastChild;
	}
	var pre = parentNode.lastChild;
	newChild.parentNode = parentNode;
	newChild.previousSibling = pre;
	newChild.nextSibling = null;
	if(pre){
		pre.nextSibling = newChild;
	}else{
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
	return newChild;
	//console.log("__aa",parentNode.lastChild.nextSibling == null)
}
Document.prototype = {
	//implementation : null,
	nodeName :  '#document',
	nodeType :  DOCUMENT_NODE,
	doctype :  null,
	documentElement :  null,
	_inc : 1,
	
	insertBefore :  function(newChild, refChild){
		var this$1 = this;
//raises 
		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
			var child = newChild.firstChild;
			while(child){
				var next = child.nextSibling;
				this$1.insertBefore(child,refChild);
				child = next;
			}
			return newChild;
		}
		if(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){
			this.documentElement = newChild;
		}
		
		return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
	},
	removeChild :  function(oldChild){
		if(this.documentElement == oldChild){
			this.documentElement = null;
		}
		return _removeChild(this,oldChild);
	},
	// Introduced in DOM Level 2:
	importNode : function(importedNode,deep){
		return importNode(this,importedNode,deep);
	},
	// Introduced in DOM Level 2:
	getElementById :	function(id){
		var rtv = null;
		_visitNode(this.documentElement,function(node){
			if(node.nodeType == ELEMENT_NODE){
				if(node.getAttribute('id') == id){
					rtv = node;
					return true;
				}
			}
		});
		return rtv;
	},
	
	//document factory method:
	createElement :	function(tagName){
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.childNodes = new NodeList();
		var attrs	= node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment :	function(){
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode :	function(data){
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data);
		return node;
	},
	createComment :	function(data){
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data);
		return node;
	},
	createCDATASection :	function(data){
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data);
		return node;
	},
	createProcessingInstruction :	function(target,data){
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.target = target;
		node.nodeValue= node.data = data;
		return node;
	},
	createAttribute :	function(name){
		var node = new Attr();
		node.ownerDocument	= this;
		node.name = name;
		node.nodeName	= name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference :	function(name){
		var node = new EntityReference();
		node.ownerDocument	= this;
		node.nodeName	= name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS :	function(namespaceURI,qualifiedName){
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs	= node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS :	function(namespaceURI,qualifiedName){
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends(Document,Node);


function Element() {
	this._nsMap = {};
}
Element.prototype = {
	nodeType : ELEMENT_NODE,
	hasAttribute : function(name){
		return this.getAttributeNode(name)!=null;
	},
	getAttribute : function(name){
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode : function(name){
		return this.attributes.getNamedItem(name);
	},
	setAttribute : function(name, value){
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr);
	},
	removeAttribute : function(name){
		var attr = this.getAttributeNode(name);
		attr && this.removeAttributeNode(attr);
	},
	
	//four real opeartion method
	appendChild:function(newChild){
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			return this.insertBefore(newChild,null);
		}else{
			return _appendSingleChild(this,newChild);
		}
	},
	setAttributeNode : function(newAttr){
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS : function(newAttr){
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode : function(oldAttr){
		//console.log(this == oldAttr.ownerElement)
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS : function(namespaceURI, localName){
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},
	
	hasAttributeNS : function(namespaceURI, localName){
		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
	},
	getAttributeNS : function(namespaceURI, localName){
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS : function(namespaceURI, qualifiedName, value){
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr);
	},
	getAttributeNodeNS : function(namespaceURI, localName){
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},
	
	getElementsByTagName : function(tagName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS : function(namespaceURI, localName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
					ls.push(node);
				}
			});
			return ls;
			
		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


_extends(Element,Node);
function Attr() {
}
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr,Node);


function CharacterData() {
}
CharacterData.prototype = {
	data : '',
	substringData : function(offset, count) {
		return this.data.substring(offset, offset+count);
	},
	appendData: function(text) {
		text = this.data+text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function(offset,text) {
		this.replaceData(offset,0,text);
	
	},
	appendChild:function(newChild){
		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
	},
	deleteData: function(offset, count) {
		this.replaceData(offset,count,"");
	},
	replaceData: function(offset, count, text) {
		var start = this.data.substring(0,offset);
		var end = this.data.substring(offset+count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
};
_extends(CharacterData,Node);
function Text() {
}
Text.prototype = {
	nodeName : "#text",
	nodeType : TEXT_NODE,
	splitText : function(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if(this.parentNode){
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
};
_extends(Text,CharacterData);
function Comment() {
}
Comment.prototype = {
	nodeName : "#comment",
	nodeType : COMMENT_NODE
};
_extends(Comment,CharacterData);

function CDATASection() {
}
CDATASection.prototype = {
	nodeName : "#cdata-section",
	nodeType : CDATA_SECTION_NODE
};
_extends(CDATASection,CharacterData);


function DocumentType() {
}
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType,Node);

function Notation() {
}
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation,Node);

function Entity() {
}
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity,Node);

function EntityReference() {
}
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference,Node);

function DocumentFragment() {
}
DocumentFragment.prototype.nodeName =	"#document-fragment";
DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment,Node);


function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction,Node);
function XMLSerializer$1(){}
XMLSerializer$1.prototype.serializeToString = function(node,isHtml,nodeFilter){
	return nodeSerializeToString.call(node,isHtml,nodeFilter);
};
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml,nodeFilter){
	var buf = [];
	var refNode = this.nodeType == 9?this.documentElement:this;
	var prefix = refNode.prefix;
	var uri = refNode.namespaceURI;
	
	if(uri && prefix == null){
		//console.log(prefix)
		var prefix = refNode.lookupPrefix(uri);
		if(prefix == null){
			//isHTML = true;
			var visibleNamespaces=[
			{namespace:uri,prefix:null} ];
		}
	}
	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
	return buf.join('');
}
function needNamespaceDefine(node,isHTML, visibleNamespaces) {
	var prefix = node.prefix||'';
	var uri = node.namespaceURI;
	if (!prefix && !uri){
		return false;
	}
	if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" 
		|| uri == 'http://www.w3.org/2000/xmlns/'){
		return false;
	}
	
	var i = visibleNamespaces.length; 
	//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)
	while (i--) {
		var ns = visibleNamespaces[i];
		// get namespace prefix
		//console.log(node.nodeType,node.tagName,ns.prefix,prefix)
		if (ns.prefix == prefix){
			return ns.namespace != uri;
		}
	}
	//console.log(isHTML,uri,prefix=='')
	//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){
	//	return false;
	//}
	//node.flag = '11111'
	//console.error(3,true,node.flag,node.prefix,node.namespaceURI)
	return true;
}
function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
	if(nodeFilter){
		node = nodeFilter(node);
		if(node){
			if(typeof node == 'string'){
				buf.push(node);
				return;
			}
		}else{
			return;
		}
		//buf.sort.apply(attrs, attributeSorter);
	}
	switch(node.nodeType){
	case ELEMENT_NODE:
		if (!visibleNamespaces) { visibleNamespaces = []; }
		var startVisibleNamespaces = visibleNamespaces.length;
		var attrs = node.attributes;
		var len = attrs.length;
		var child = node.firstChild;
		var nodeName = node.tagName;
		
		isHTML =  (htmlns === node.namespaceURI) ||isHTML; 
		buf.push('<',nodeName);
		
		
		
		for(var i=0;i<len;i++){
			// add namespaces for attributes
			var attr = attrs.item(i);
			if (attr.prefix == 'xmlns') {
				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
			}else if(attr.nodeName == 'xmlns'){
				visibleNamespaces.push({ prefix: '', namespace: attr.value });
			}
		}
		for(var i=0;i<len;i++){
			var attr = attrs.item(i);
			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
				var prefix = attr.prefix||'';
				var uri = attr.namespaceURI;
				var ns = prefix ? ' xmlns:' + prefix : " xmlns";
				buf.push(ns, '="' , uri , '"');
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}
			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
		}
		// add namespace for current node		
		if (needNamespaceDefine(node,isHTML, visibleNamespaces)) {
			var prefix = node.prefix||'';
			var uri = node.namespaceURI;
			var ns = prefix ? ' xmlns:' + prefix : " xmlns";
			buf.push(ns, '="' , uri , '"');
			visibleNamespaces.push({ prefix: prefix, namespace:uri });
		}
		
		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
			buf.push('>');
			//if is cdata child node
			if(isHTML && /^script$/i.test(nodeName)){
				while(child){
					if(child.data){
						buf.push(child.data);
					}else{
						serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					}
					child = child.nextSibling;
				}
			}else
			{
				while(child){
					serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					child = child.nextSibling;
				}
			}
			buf.push('</',nodeName,'>');
		}else{
			buf.push('/>');
		}
		// remove added visible namespaces
		//visibleNamespaces.length = startVisibleNamespaces;
		return;
	case DOCUMENT_NODE:
	case DOCUMENT_FRAGMENT_NODE:
		var child = node.firstChild;
		while(child){
			serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
			child = child.nextSibling;
		}
		return;
	case ATTRIBUTE_NODE:
		return buf.push(' ',node.name,'="',node.value.replace(/[<&"]/g,_xmlEncoder),'"');
	case TEXT_NODE:
		return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));
	case CDATA_SECTION_NODE:
		return buf.push( '<![CDATA[',node.data,']]>');
	case COMMENT_NODE:
		return buf.push( "<!--",node.data,"-->");
	case DOCUMENT_TYPE_NODE:
		var pubid = node.publicId;
		var sysid = node.systemId;
		buf.push('<!DOCTYPE ',node.name);
		if(pubid){
			buf.push(' PUBLIC "',pubid);
			if (sysid && sysid!='.') {
				buf.push( '" "',sysid);
			}
			buf.push('">');
		}else if(sysid && sysid!='.'){
			buf.push(' SYSTEM "',sysid,'">');
		}else{
			var sub = node.internalSubset;
			if(sub){
				buf.push(" [",sub,"]");
			}
			buf.push(">");
		}
		return;
	case PROCESSING_INSTRUCTION_NODE:
		return buf.push( "<?",node.target," ",node.data,"?>");
	case ENTITY_REFERENCE_NODE:
		return buf.push( '&',node.nodeName,';');
	//case ENTITY_NODE:
	//case NOTATION_NODE:
	default:
		buf.push('??',node.nodeName);
	}
}
function importNode(doc,node,deep){
	var node2;
	switch (node.nodeType) {
	case ELEMENT_NODE:
		node2 = node.cloneNode(false);
		node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
	case DOCUMENT_FRAGMENT_NODE:
		break;
	case ATTRIBUTE_NODE:
		deep = true;
		break;
	//case ENTITY_REFERENCE_NODE:
	//case PROCESSING_INSTRUCTION_NODE:
	////case TEXT_NODE:
	//case CDATA_SECTION_NODE:
	//case COMMENT_NODE:
	//	deep = false;
	//	break;
	//case DOCUMENT_NODE:
	//case DOCUMENT_TYPE_NODE:
	//cannot be imported.
	//case ENTITY_NODE:
	//case NOTATION_NODE：
	//can not hit in level3
	//default:throw e;
	}
	if(!node2){
		node2 = node.cloneNode(false);//false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(importNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc,node,deep){
	var node2 = new node.constructor();
	for(var n in node){
		var v = node[n];
		if(typeof v != 'object' ){
			if(v != node2[n]){
				node2[n] = v;
			}
		}
	}
	if(node.childNodes){
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
	case ELEMENT_NODE:
		var attrs	= node.attributes;
		var attrs2	= node2.attributes = new NamedNodeMap();
		var len = attrs.length;
		attrs2._ownerElement = node2;
		for(var i=0;i<len;i++){
			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
		}
		break;;
	case ATTRIBUTE_NODE:
		deep = true;
	}
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(cloneNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object,key,value){
	object[key] = value;
}
//do dynamic
try{
	if(Object.defineProperty){
		Object.defineProperty(LiveNodeList.prototype,'length',{
			get:function(){
				_updateLiveList(this);
				return this.$$length;
			}
		});
		Object.defineProperty(Node.prototype,'textContent',{
			get:function(){
				return getTextContent(this);
			},
			set:function(data){
				var this$1 = this;

				switch(this.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					while(this.firstChild){
						this$1.removeChild(this$1.firstChild);
					}
					if(data || String(data)){
						this.appendChild(this.ownerDocument.createTextNode(data));
					}
					break;
				default:
					//TODO:
					this.data = data;
					this.value = data;
					this.nodeValue = data;
				}
			}
		});
		
		function getTextContent(node){
			switch(node.nodeType){
			case ELEMENT_NODE:
			case DOCUMENT_FRAGMENT_NODE:
				var buf = [];
				node = node.firstChild;
				while(node){
					if(node.nodeType!==7 && node.nodeType !==8){
						buf.push(getTextContent(node));
					}
					node = node.nextSibling;
				}
				return buf.join('');
			default:
				return node.nodeValue;
			}
		}
		__set__ = function(object,key,value){
			//console.log(value)
			object['$$'+key] = value;
		};
	}
}catch(e){//ie8
}

//if(typeof require == 'function'){
	var DOMImplementation_1 = DOMImplementation;
	var XMLSerializer_1 = XMLSerializer$1;
//}

var dom = {
	DOMImplementation: DOMImplementation_1,
	XMLSerializer: XMLSerializer_1
};

var domParser = createCommonjsModule(function (module, exports) {
function DOMParser(options){
	this.options = options ||{locator:{}};
	
}
DOMParser.prototype.parseFromString = function(source,mimeType){
	var options = this.options;
	var sax$$1 =  new XMLReader();
	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
	var errorHandler = options.errorHandler;
	var locator = options.locator;
	var defaultNSMap = options.xmlns||{};
	var entityMap = {'lt':'<','gt':'>','amp':'&','quot':'"','apos':"'"};
	if(locator){
		domBuilder.setDocumentLocator(locator);
	}
	
	sax$$1.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
	sax$$1.domBuilder = options.domBuilder || domBuilder;
	if(/\/x?html?$/.test(mimeType)){
		entityMap.nbsp = '\xa0';
		entityMap.copy = '\xa9';
		defaultNSMap['']= 'http://www.w3.org/1999/xhtml';
	}
	defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';
	if(source){
		sax$$1.parse(source,defaultNSMap,entityMap);
	}else{
		sax$$1.errorHandler.error("invalid doc source");
	}
	return domBuilder.doc;
};
function buildErrorHandler(errorImpl,domBuilder,locator){
	if(!errorImpl){
		if(domBuilder instanceof DOMHandler){
			return domBuilder;
		}
		errorImpl = domBuilder ;
	}
	var errorHandler = {};
	var isCallback = errorImpl instanceof Function;
	locator = locator||{};
	function build(key){
		var fn = errorImpl[key];
		if(!fn && isCallback){
			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg);}:errorImpl;
		}
		errorHandler[key] = fn && function(msg){
			fn('[xmldom '+key+']\t'+msg+_locator(locator));
		}||function(){};
	}
	build('warning');
	build('error');
	build('fatalError');
	return errorHandler;
}

//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler 
 * 
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */
function DOMHandler() {
    this.cdata = false;
}
function position(locator,node){
	node.lineNumber = locator.lineNumber;
	node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */ 
DOMHandler.prototype = {
	startDocument : function() {
    	this.doc = new DOMImplementation().createDocument(null, null, null);
    	if (this.locator) {
        	this.doc.documentURI = this.locator.systemId;
    	}
	},
	startElement:function(namespaceURI, localName, qName, attrs) {
		var this$1 = this;

		var doc = this.doc;
	    var el = doc.createElementNS(namespaceURI, qName||localName);
	    var len = attrs.length;
	    appendElement(this, el);
	    this.currentElement = el;
	    
		this.locator && position(this.locator,el);
	    for (var i = 0 ; i < len; i++) {
	        var namespaceURI = attrs.getURI(i);
	        var value = attrs.getValue(i);
	        var qName = attrs.getQName(i);
			var attr = doc.createAttributeNS(namespaceURI, qName);
			this$1.locator &&position(attrs.getLocator(i),attr);
			attr.value = attr.nodeValue = value;
			el.setAttributeNode(attr);
	    }
	},
	endElement:function(namespaceURI, localName, qName) {
		var current = this.currentElement;
		var tagName = current.tagName;
		this.currentElement = current.parentNode;
	},
	startPrefixMapping:function(prefix, uri) {
	},
	endPrefixMapping:function(prefix) {
	},
	processingInstruction:function(target, data) {
	    var ins = this.doc.createProcessingInstruction(target, data);
	    this.locator && position(this.locator,ins);
	    appendElement(this, ins);
	},
	ignorableWhitespace:function(ch, start, length) {
	},
	characters:function(chars, start, length) {
		chars = _toString.apply(this,arguments);
		//console.log(chars)
		if(chars){
			if (this.cdata) {
				var charNode = this.doc.createCDATASection(chars);
			} else {
				var charNode = this.doc.createTextNode(chars);
			}
			if(this.currentElement){
				this.currentElement.appendChild(charNode);
			}else if(/^\s*$/.test(chars)){
				this.doc.appendChild(charNode);
				//process xml
			}
			this.locator && position(this.locator,charNode);
		}
	},
	skippedEntity:function(name) {
	},
	endDocument:function() {
		this.doc.normalize();
	},
	setDocumentLocator:function (locator) {
	    if(this.locator = locator){// && !('lineNumber' in locator)){
	    	locator.lineNumber = 0;
	    }
	},
	//LexicalHandler
	comment:function(chars, start, length) {
		chars = _toString.apply(this,arguments);
	    var comm = this.doc.createComment(chars);
	    this.locator && position(this.locator,comm);
	    appendElement(this, comm);
	},
	
	startCDATA:function() {
	    //used in characters() methods
	    this.cdata = true;
	},
	endCDATA:function() {
	    this.cdata = false;
	},
	
	startDTD:function(name, publicId, systemId) {
		var impl = this.doc.implementation;
	    if (impl && impl.createDocumentType) {
	        var dt = impl.createDocumentType(name, publicId, systemId);
	        this.locator && position(this.locator,dt);
	        appendElement(this, dt);
	    }
	},
	/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */
	warning:function(error) {
		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
	},
	error:function(error) {
		console.error('[xmldom error]\t'+error,_locator(this.locator));
	},
	fatalError:function(error) {
		console.error('[xmldom fatalError]\t'+error,_locator(this.locator));
	    throw error;
	}
};
function _locator(l){
	if(l){
		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
	}
}
function _toString(chars,start,length){
	if(typeof chars == 'string'){
		return chars.substr(start,length)
	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
		if(chars.length >= start+length || start){
			return new java.lang.String(chars,start,length)+'';
		}
		return chars;
	}
}

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
	DOMHandler.prototype[key] = function(){return null};
});

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
function appendElement (hander,node) {
    if (!hander.currentElement) {
        hander.doc.appendChild(node);
    } else {
        hander.currentElement.appendChild(node);
    }
}//appendChild and setAttributeNS are preformance key

//if(typeof require == 'function'){
	var XMLReader = sax.XMLReader;
	var DOMImplementation = exports.DOMImplementation = dom.DOMImplementation;
	exports.XMLSerializer = dom.XMLSerializer ;
	exports.DOMParser = DOMParser;
//}
});

var Blob$8 = makeBlob();

var XMLSerializer$$1 = domParser.XMLSerializer;
// NOTE: might be useful :https://github.com/jindw/xmldom/pull/152/commits/be5176ece6fa1591daef96a5f361aaacaa445175

function CSGToX3D (CSG) {
  var DOMImplementation$$1 = typeof document !== 'undefined' ? document.implementation : new domParser.DOMImplementation();
  // materialPolygonLists
  // key: a color string (e.g. "0 1 1" for yellow)
  // value: an array of strings specifying polygons of this color
  //        (as space-separated indices into vertexCoords)
  var materialPolygonLists = {},
    // list of coordinates (as "x y z" strings)
    vertexCoords = [],
    // map to look up the index in vertexCoords of a given vertex
    vertexTagToCoordIndexMap = {};

  CSG.polygons.map(function (p) {
    var red = 0,
      green = 0,
      blue = 1; // default color is blue
    if (p.shared && p.shared.color) {
      red = p.shared.color[0];
      green = p.shared.color[1];
      blue = p.shared.color[2];
    }

    var polygonVertexIndices = [],
      numvertices = p.vertices.length,
      vertex;
    for (var i = 0; i < numvertices; i++) {
      vertex = p.vertices[i];
      if (!(vertex.getTag() in vertexTagToCoordIndexMap)) {
        vertexCoords.push(vertex.pos._x.toString() + ' ' +
          vertex.pos._y.toString() + ' ' +
          vertex.pos._z.toString()
        );
        vertexTagToCoordIndexMap[vertex.getTag()] = vertexCoords.length - 1;
      }
      polygonVertexIndices.push(vertexTagToCoordIndexMap[vertex.getTag()]);
    }

    var polygonString = polygonVertexIndices.join(' ');

    var colorString = red.toString() + ' ' + green.toString() + ' ' + blue.toString();
    if (!(colorString in materialPolygonLists)) {
      materialPolygonLists[colorString] = [];
    }
    // add this polygonString to the list of colorString-colored polygons
    materialPolygonLists[colorString].push(polygonString);
  });

  // create output document
  var docType = DOMImplementation$$1.createDocumentType('X3D',
    'ISO//Web3D//DTD X3D 3.1//EN', 'http://www.web3d.org/specifications/x3d-3.1.dtd');
  var exportDoc = DOMImplementation$$1.createDocument(null, 'X3D', docType);
  exportDoc.insertBefore(
    exportDoc.createProcessingInstruction('xml', 'version="1.0" encoding="UTF-8"'),
    exportDoc.doctype);

  var exportRoot = exportDoc.getElementsByTagName('X3D')[0];
  exportRoot.setAttribute('profile', 'Interchange');
  exportRoot.setAttribute('version', '3.1');
  exportRoot.setAttribute('xsd:noNamespaceSchemaLocation', 'http://www.web3d.org/specifications/x3d-3.1.xsd');
  exportRoot.setAttribute('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema-instance');

  var exportScene = exportDoc.createElement('Scene');
  exportRoot.appendChild(exportScene);

  /*
      For each color, create a shape made of an appropriately colored
      material which contains all polygons that are this color.

      The first shape will contain the definition of all vertices,
      (<Coordinate DEF="coords_mesh"/>), which will be referenced by
      subsequent shapes.
    */
  var coordsMeshDefined = false;
  for (var colorString in materialPolygonLists) {
    var polygonList = materialPolygonLists[colorString];
    var shape = exportDoc.createElement('Shape');
    exportScene.appendChild(shape);

    var appearance = exportDoc.createElement('Appearance');
    shape.appendChild(appearance);

    var material = exportDoc.createElement('Material');
    appearance.appendChild(material);
    material.setAttribute('diffuseColor', colorString);
    material.setAttribute('ambientIntensity', '1.0');

    var ifs = exportDoc.createElement('IndexedFaceSet');
    shape.appendChild(ifs);
    ifs.setAttribute('solid', 'true');
    ifs.setAttribute('coordIndex', polygonList.join(' -1 ') + ' -1');

    var coordinate = exportDoc.createElement('Coordinate');
    ifs.appendChild(coordinate);
    if (coordsMeshDefined) {
      coordinate.setAttribute('USE', 'coords_mesh');
    } else {
      coordinate.setAttribute('DEF', 'coords_mesh');
      coordinate.setAttribute('point', vertexCoords.join(' '));
      coordsMeshDefined = true;
    }
  }

  var x3dstring = (new XMLSerializer$$1()).serializeToString(exportDoc);
  return new Blob$8([x3dstring], {
    type: 'model/x3d+xml'
  })
}

/*
## License

Copyright (c) 2016 Z3 Development https://github.com/z3dev
Copyright (c) 2013-2016 by Rene K. Mueller <spiritdude@gmail.com>
Copyright (c) 2016 by Z3D Development

All code released under MIT license

History:
  2016/06/27: 0.5.1: rewrote using SAX XML parser, enhanced for multiple objects, materials, units by Z3Dev
  2013/04/11: 0.018: added alpha support to AMF export

*/

// //////////////////////////////////////////
//
// AMF is a language for describing three-dimensional graphics in XML
// See http://www.astm.org/Standards/ISOASTM52915.htm
// See http://amf.wikispaces.com/
//
// //////////////////////////////////////////
var sax$2 = require('sax');

var inchMM = (1 / 0.039370);       // used for scaling AMF (inch) to CAG coordinates(MM)

// processing controls
sax$2.SAXParser.prototype.amfLast = null;  // last object found
sax$2.SAXParser.prototype.amfDefinition = 0;     // definitions beinging created
                                               //   0-AMF,1-object,2-material,3-texture,4-constellation,5-metadata
// high level elements / definitions
sax$2.SAXParser.prototype.amfObjects = [];    // list of objects
sax$2.SAXParser.prototype.amfMaterials = [];    // list of materials
sax$2.SAXParser.prototype.amfTextures = [];    // list of textures
sax$2.SAXParser.prototype.amfConstels = [];    // list of constellations
sax$2.SAXParser.prototype.amfMetadata = [];    // list of metadata

sax$2.SAXParser.prototype.amfObj = null;  // amf in object form

function amfAmf (element) {
// default SVG with no viewport
  var obj = {type: 'amf', unit: 'mm', scale: 1.0};

  if ('UNIT' in element) { obj.unit = element.UNIT.toLowerCase(); }
// set scaling
  switch (obj.unit.toLowerCase()) {
    case 'inch':
      obj.scale = inchMM;
      break
    case 'foot':
      obj.scale = inchMM * 12.0;
      break
    case 'meter':
      obj.scale = 1000.0;
      break
    case 'micron':
      obj.scale = 0.001;
      break
    case 'millimeter':
    default:
      break
  }

  obj.objects = [];
  return obj
}

sax$2.SAXParser.prototype.amfObject = function (element) {
  var obj = {type: 'object', id: 'JSCAD' + (this.amfObjects.length)}; // default ID

  if ('ID' in element) { obj.id = element.ID; }

  obj.objects = [];
  return obj
};

function amfMesh (element) {
  var obj = {type: 'mesh'};

  obj.objects = [];
  return obj
}

// Note: TBD Vertices can have a color, which is used to interpolate a face color (from the 3 vertices)
function amfVertices (element) {
  var obj = {type: 'vertices'};
  obj.objects = [];
  return obj
}

function amfCoordinates (element) {
  var obj = {type: 'coordinates'};

  obj.objects = [];
  return obj
}
function amfNormal (element) {
  var obj = {type: 'normal'};

  obj.objects = [];
  return obj
}
function amfX (element) {
  return {type: 'x', value: '0'}
}
function amfY (element) {
  return {type: 'y', value: '0'}
}
function amfZ (element) {
  return {type: 'z', value: '0'}
}

function amfVolume (element) {
  var obj = {type: 'volume'};

  if ('MATERIALID' in element) { obj.materialid = element.MATERIALID; }

  obj.objects = [];
  return obj
}

function amfTriangle (element) {
  var obj = {type: 'triangle'};

  obj.objects = [];
  return obj
}
function amfV1 (element) {
  return {type: 'v1', value: '0'}
}
function amfV2 (element) {
  return {type: 'v2', value: '0'}
}
function amfV3 (element) {
  return {type: 'v3', value: '0'}
}

function amfVertex (element) {
  var obj = {type: 'vertex'};
  obj.objects = [];
  return obj
}

function amfEdge (element) {
  var obj = {type: 'edge'};

  obj.objects = [];
  return obj
}

function amfMetadata (element) {
  var obj = {type: 'metadata'};

  if ('TYPE' in element) { obj.mtype = element.TYPE; }
  if ('ID' in element) { obj.id = element.ID; }

  return obj
}

function amfMaterial (element) {
  var obj = {type: 'material'};

  if ('ID' in element) { obj.id = element.ID; }

  obj.objects = [];
  return obj
}

function amfColor (element) {
  var obj = {type: 'color'};

  obj.objects = [];
  return obj
}
function amfR (element) {
  return {type: 'r', value: '1'}
}
function amfG (element) {
  return {type: 'g', value: '1'}
}
function amfB (element) {
  return {type: 'b', value: '1'}
}
function amfA (element) {
  return {type: 'a', value: '1'}
}

function amfMap (element) {
  var obj = {type: 'map'};

  if ('GTEXID' in element) { obj.gtexid = element.GTEXID; }
  if ('BTEXID' in element) { obj.btexid = element.BTEXID; }
  if ('RTEXID' in element) { obj.rtexid = element.RTEXID; }

  obj.objects = [];
  return obj
}

function amfU1 (element) {
  return {type: 'u1', value: '0'}
}
function amfU2 (element) {
  return {type: 'u2', value: '0'}
}
function amfU3 (element) {
  return {type: 'u3', value: '0'}
}

function createAmfParser (src, pxPmm) {
  // create a parser for the XML
  var parser = sax$2.parser(false, {trim: true, lowercase: false, position: true});

  parser.onerror = function (e) {
    console.log('error: line ' + e.line + ', column ' + e.column + ', bad character [' + e.c + ']');
  };
  parser.onopentag = function (node) {
    // console.log('opentag: '+node.name+' at line '+this.line+' position '+this.column);
    // for (x in node.attributes) {
    //  console.log('    '+x+'='+node.attributes[x]);
    // }
    var obj = null;
    switch (node.name) {
    // top level elements
      case 'AMF':
        obj = amfAmf(node.attributes);
        break
      case 'OBJECT':
        obj = this.amfObject(node.attributes);
        if (this.amfDefinition === 0) { this.amfDefinition = 1; } // OBJECT processing
        break
      case 'MESH':
        obj = amfMesh(node.attributes);
        break
      case 'VERTICES':
        obj = amfVertices(node.attributes);
        break
      case 'VERTEX':
        obj = amfVertex(node.attributes);
        break
      case 'EDGE':
        obj = amfEdge(node.attributes);
        break
      case 'VOLUME':
        obj = amfVolume(node.attributes);
        break
      case 'MATERIAL':
        obj = amfMaterial(node.attributes);
        if (this.amfDefinition === 0) { this.amfDefinition = 2; } // MATERIAL processing
        break
      case 'COMPOSITE':
        break
      case 'TEXTURE':
        if (this.amfDefinition === 0) { this.amfDefinition = 3; } // TEXTURE processing
        break
      case 'CONSTELLATION':
        if (this.amfDefinition === 0) { this.amfDefinition = 4; } // CONSTELLATION processing
        break
      case 'METADATA':
        obj = amfMetadata(node.attributes);
        if (this.amfDefinition === 0) { this.amfDefinition = 5; } // METADATA processing
        break
    // coordinate elements
      case 'COORDINATES':
        obj = amfCoordinates(node.attributes);
        break
      case 'NORMAL':
        obj = amfNormal(node.attributes);
        break
      case 'X':
      case 'NX':
        obj = amfX(node.attributes);
        break
      case 'Y':
      case 'NY':
        obj = amfY(node.attributes);
        break
      case 'Z':
      case 'NZ':
        obj = amfZ(node.attributes);
        break
    // triangle elements
      case 'TRIANGLE':
        obj = amfTriangle(node.attributes);
        break
      case 'V1':
      case 'VTEX1':
        obj = amfV1(node.attributes);
        break
      case 'V2':
      case 'VTEX2':
        obj = amfV2(node.attributes);
        break
      case 'V3':
      case 'VTEX3':
        obj = amfV3(node.attributes);
        break
    // color elements
      case 'COLOR':
        obj = amfColor(node.attributes);
        break
      case 'R':
        obj = amfR(node.attributes);
        break
      case 'G':
        obj = amfG(node.attributes);
        break
      case 'B':
        obj = amfB(node.attributes);
        break
      case 'A':
        obj = amfA(node.attributes);
        break
    // map elements
      case 'MAP':
      case 'TEXMAP':
        obj = amfMap(node.attributes);
        break
      case 'U1':
      case 'UTEX1':
      case 'VTEX1':
      case 'WTEX1':
        obj = amfU1(node.attributes);
        break
      case 'U2':
      case 'UTEX2':
      case 'VTEX2':
      case 'WTEX2':
        obj = amfU2(node.attributes);
        break
      case 'U3':
      case 'UTEX3':
      case 'VTEX3':
      case 'WTEX3':
        obj = amfU3(node.attributes);
        break
      default:
        // console.log('opentag: '+node.name+' at line '+this.line+' position '+this.column);
        break
    }

    if (obj !== null) {
      // console.log('definitinon '+this.amfDefinition);
      switch (this.amfDefinition) {
        case 0: // definition of AMF
          if ('objects' in obj) {
            // console.log('push object ['+obj.type+']');
            this.amfObjects.push(obj);
          }
          break
        case 1: // definition of OBJECT
          if (this.amfObjects.length > 0) {
            var group = this.amfObjects.pop();
          // add the object to the active group if necessary
            if ('objects' in group) {
              // console.log('object '+group.type+' adding ['+obj.type+']');
              // console.log(JSON.stringify(obj));
              group.objects.push(obj);
            }
            this.amfObjects.push(group);
          // and push this object as a group object if necessary
            if ('objects' in obj) {
              // console.log('object group ['+obj.type+']');
              this.amfObjects.push(obj);
            }
          }
          break
        case 2: // definition of MATERIAL
          if (obj.type === 'material') {
            // console.log('push material ['+obj.type+']');
            this.amfMaterials.push(obj);
          } else {
            if (this.amfMaterials.length > 0) {
              var group = this.amfMaterials.pop();
            // add the object to the active group if necessary
              if ('objects' in group) {
                // console.log('material '+group.type+' adding ['+obj.type+']');
                // console.log(JSON.stringify(obj));
                group.objects.push(obj);
              }
              this.amfMaterials.push(group);
            // and push this object as a group object if necessary
              if ('objects' in obj) {
                // console.log('push material ['+obj.type+']');
                this.amfMaterials.push(obj);
              }
            }
          }
          break
        case 3: // definition of TEXTURE
          break
        case 4: // definition of CONSTELLATION
          break
        case 5: // definition of METADATA
          break
        default:
          console.log('ERROR: invalid AMF definition');
          break
      }
      this.amfLast = obj; // retain this object in order to add values
    }
  };

  parser.onclosetag = function (node) {
// console.log('onclosetag: '+this.amfDefinition);
    switch (node) {
    // list those which have objects
      case 'AMF':
      case 'OBJECT':
      case 'MESH':
      case 'VERTICES':
      case 'VERTEX':
      case 'EDGE':
      case 'COORDINATES':
      case 'NORMAL':
      case 'VOLUME':
      case 'TRIANGLE':
      case 'MATERIAL':
      case 'COLOR':
      case 'MAP':
      case 'TEXMAP':
        break
      case 'TEXTURE':
        if (this.amfDefinition === 3) { this.amfDefinition = 0; } // resume processing
        return
      case 'CONSTELLATION':
        if (this.amfDefinition === 4) { this.amfDefinition = 0; } // resume processing
        return
      case 'METADATA':
        if (this.amfDefinition === 5) { this.amfDefinition = 0; } // resume processing
        return
      default:
        // console.log('closetag: '+node);
        return
    }

    var obj = null;
    switch (this.amfDefinition) {
      case 0: // definition of AMF
      case 1: // definition of OBJECT
        if (this.amfObjects.length > 0) {
          obj = this.amfObjects.pop();
          // console.log('pop object ['+obj.type+']');
          if (obj.type === 'object') {
            this.amfDefinition = 0; // AMF processing
          }
        }
      // check for completeness
        if (this.amfObjects.length === 0) {
          this.amfObj = obj;
        }
        break
      case 2: // definition of MATERIAL
        if (this.amfMaterials.length > 0) {
          obj = this.amfMaterials.pop();
          // console.log('pop material ['+obj.type+']');
          if (obj.type === 'material') {
            this.amfMaterials.push(obj); // keep a list of materials
            this.amfDefinition = 0; // AMF processing
          }
        }
        break
      case 3: // definition of TEXTURE
        this.amfDefinition = 0; // AMF processing
        break
      case 4: // definition of CONSTELLATION
        this.amfDefinition = 0; // AMF processing
        break
      case 5: // definition of METADATA
        this.amfDefinition = 0; // AMF processing
        break
      default:
        break
    }
  };

  parser.ontext = function (value) {
    if (value !== null) {
      if (this.amfLast && this.amfDefinition !== 0) {
        this.amfLast.value = value;
        // console.log(JSON.stringify(this.amfLast));
      }
    }
  };

  parser.onend = function () {
    // console.log('AMF parsing completed');
  };

// start the parser
  parser.write(src).close();

  return parser
}

//
// convert the internal repreentation into JSCAD code
//
function codify (amf, data) {
  if (amf.type !== 'amf' || (!amf.objects)) { throw new Error('AMF malformed') }

  var code = '';

// hack due to lack of this in array map()
  var objects = amf.objects;
  var materials = data.amfMaterials;
  var lastmaterial = null;
  function findMaterial (id) {
    if (lastmaterial && lastmaterial.id === id) { return lastmaterial }
    for (var i = 0; i < materials.length; i++) {
      if (materials[i].id && materials[i].id === id) {
        lastmaterial = materials[i];
        return lastmaterial
      }
    }
    return null
  }
  function getValue (objects, type) {
    for (var i = 0; i < objects.length; i++) {
      if (objects[i].type === type) { return objects[i].value }
    }
    return null
  }
  function getColor (objects) {
    for (var i = 0; i < objects.length; i++) {
      var obj = objects[i];
      if (obj.type === 'color') {
        var r = parseFloat(getValue(obj.objects, 'r'));
        var g = parseFloat(getValue(obj.objects, 'g'));
        var b = parseFloat(getValue(obj.objects, 'b'));
        var a = parseFloat(getValue(obj.objects, 'a'));
        if (Number.isNaN(r)) { r = 1.0; } // AMF default color
        if (Number.isNaN(g)) { g = 1.0; }
        if (Number.isNaN(b)) { b = 1.0; }
        if (Number.isNaN(a)) { a = 1.0; }
        return [r, g, b, a]
      }
    }
    return null
  }
  function findColorByMaterial (id) {
    var m = findMaterial(id);
    if (m) {
      return getColor(m.objects)
    }
    return null
  }

// convert high level definitions
  function createDefinition (obj, didx) {
// console.log(materials.length);
    switch (obj.type) {
      case 'object':
        createObject(obj, didx);
        break
      case 'metadata':
        break
      case 'material':
        break
      default:
        console.log('Warning: unknown definition: ' + obj.type);
        break
    }
  }
// convert all objects to CSG based code
  function createObject (obj, oidx) {
    var vertices = [];    // [x,y,z]
    var faces = [];    // [v1,v2,v3]
    var colors = [];    // [r,g,b,a]

    function addCoord (coord, cidx) {
      if (coord.type === 'coordinates') {
        var x = parseFloat(getValue(coord.objects, 'x'));
        var y = parseFloat(getValue(coord.objects, 'y'));
        var z = parseFloat(getValue(coord.objects, 'z'));
// console.log('['+x+','+y+','+z+']');
        vertices.push([x, y, z]);
      }
    // normal is possible
    }
    function addVertex (vertex, vidx) {
// console.log(vertex.type);
      if (vertex.type === 'vertex') {
        vertex.objects.map(addCoord);
      }
    // edge is possible
    }
    function addTriangle (tri, tidx) {
      if (tri.type === 'triangle') {
        var v1 = parseInt(getValue(tri.objects, 'v1'));
        var v2 = parseInt(getValue(tri.objects, 'v2'));
        var v3 = parseInt(getValue(tri.objects, 'v3'));
// console.log('['+v1+','+v2+','+v3+']');
        faces.push([v1, v2, v3]);        // HINT: reverse order for polyhedron()
        var c = getColor(tri.objects);
        if (c) {
          colors.push(c);
        } else {
          colors.push(tricolor);
        }
      }
    }
    var tricolor = null; // for found colors
    function addPart (part, pidx) {
// console.log(part.type);
      switch (part.type) {
        case 'vertices':
          part.objects.map(addVertex, data);
          break
        case 'volume':
          tricolor = getColor(part.objects);
          if (part.materialid) {
          // convert material to color
            tricolor = findColorByMaterial(part.materialid);
          }
          part.objects.map(addTriangle, data);
          break
        default:
          break
      }
    }
    function addMesh (mesh, midx) {
// console.log(mesh.type);
      if (mesh.type === 'mesh') {
        mesh.objects.map(addPart, data);
      }
    }

    if (obj.objects.length > 0) {
      obj.objects.map(addMesh, data);

      var fcount = faces.length;
      var vcount = vertices.length;

      code += '// Object ' + obj.id + '\n';
      code += '//  faces   : ' + fcount + '\n';
      code += '//  vertices: ' + vcount + '\n';
      code += 'function createObject' + obj.id + '() {\n';
      code += '  var polys = [];\n';

    // convert the results into function calls
      for (var i = 0; i < fcount; i++) {
        code += '  polys.push(\n';
        code += '    PP([\n';
        for (var j = 0; j < faces[i].length; j++) {
          if (faces[i][j] < 0 || faces[i][j] >= vcount) {
            if (err.length === '') { err += 'bad index for vertice (out of range)'; }
            continue
          }
          if (j) { code += ',\n'; }
          code += '      VV(' + vertices[faces[i][j]] + ')';
        }
        code += '])';
        if (colors[i]) {
          var c = colors[i];
          code += '.setColor([' + c[0] + ',' + c[1] + ',' + c[2] + ',' + c[3] + '])';
        }
        code += ');\n';
      }
      code += '  return CSG.fromPolygons(polys);\n';
      code += '}\n';
    }
  }

// start everthing
  code = '// Objects  : ' + objects.length + '\n';
  code += '// Materials: ' + materials.length + '\n';
  code += '\n';
  code += '// helper functions\n';
  if (amf.scale !== 1.0) {
    code += 'var SCALE = ' + amf.scale + '; // scaling units (' + amf.unit + ')\n';
    code += 'var VV = function(x,y,z) { return new CSG.Vertex(new CSG.Vector3D(x*SCALE,y*SCALE,z*SCALE)); };\n';
  } else {
    code += 'var VV = function(x,y,z) { return new CSG.Vertex(new CSG.Vector3D(x,y,z)); };\n';
  }
  code += 'var PP = function(a) { return new CSG.Polygon(a); };\n';
  code += '\n';
  code += 'function main() {\n';
  code += '  var csgs = [];\n';
  for (var i = 0; i < objects.length; i++) {
    var obj = objects[i];
    if (obj.type === 'object') {
      code += '  csgs.push(createObject' + obj.id + '());\n';
    }
  }
  code += '  return union(csgs);\n';
  code += '}\n';
  code += '\n';

  objects.map(createDefinition, data);
  return code
}

//
// Parse the given AMF source and return a JSCAD script
//
// fn (optional) original filename of AMF source
// options (optional) anonymous object with:
//   pxPmm: pixels per milimeter for calcuations
// FIXME: add openjscad version in a cleaner manner ?
function parseAMF (src, fn, options) {
  fn = fn || 'amf';
  var defaults = {version: '0.0.0'};
  options = Object.assign({}, defaults, options);
  var version = options.version;

  // parse the AMF source
  var parser = createAmfParser(src);
  // convert the internal objects to JSCAD code
  var code = '';
  code += '//\n';
  code += '// producer: OpenJSCAD.org ' + version + ' AMF Importer\n';
  code += '// date: ' + (new Date()) + '\n';
  code += '// source: ' + fn + '\n';
  code += '//\n';
  if (parser.amfObj !== null) {
    // console.log(JSON.stringify(parser.amfObj))
    // console.log(JSON.stringify(parser.amfMaterials))
    code += codify(parser.amfObj, parser);
  } else {
    console.log('Warning: AMF parsing failed');
  }
  return code
}

function parseGCode (gcode, fn, options) {   // http://reprap.org/wiki/G-code
  var defaults = {version: '0.0.0'};
  options = Object.assign({}, defaults, options);
  var version = options.version;
                                  // just as experiment ...
  var l = gcode.split(/[\n]/);   // for now just GCODE ASCII
  var srci = '';
  var d = 0, pos = [], lpos = [], le = 0, ld = 0, p = [];
  var origin = [-100, -100];
  var layers = 0;
  var lh = 0.35, lz = 0;

  for (var i = 0; i < l.length; i++) {
    var val = '', k, e = 0;
    if (l[i].match(/^\s*;/)) { continue }
    var c = l[i].split(/\s+/);
    for (var j = 0; j < c.length; j++) {
      if (c[j].match(/G(\d+)/)) {
        var n = parseInt(RegExp.$1);
        if (n == 1) { d++; }
        if (n == 90) { pos.type = 'abs'; }
        if (n == 91) { pos.type = 'rel'; }
      } else if (c[j].match(/M(\d+)/)) {
        var n = parseInt(RegExp.$1);
        if (n == 104 || n == 109) { k = 'temp'; }
      } else if (c[j].match(/S([\d\.]+)/)) {
        var v = parseInt(RegExp.$1);
        if (k !== undefined) {
          val[k] = v;
        }
      } else if (c[j].match(/([XYZE])([\-\d\.]+)/)) {
        var a = RegExp.$1, v = parseFloat(RegExp.$2);
        if (pos.type == 'abs') {
          if (d) { pos[a] = v; }
        } else {
          if (d) { pos[a] += v; }
        }
            // console.log(d,a,pos.E,lpos.E);
        if (d && a == 'E' && lpos.E === undefined) {
          lpos.E = pos.E;
        }
        if (d && a == 'E' && (pos.E - lpos.E) > 0) {
               // console.log(pos.E,lpos.E);
          e++;
        }
      }
    }
    if (d && pos.X && pos.Y) {
      if (e) {
        if (!le && lpos.X && lpos.Y) {
               // console.log(lpos.X,lpos.Y);
          p.push('[' + (lpos.X + origin[0]) + ',' + (lpos.Y + origin[1]) + ']');
        }
        p.push('[' + (pos.X + origin[0]) + ',' + (pos.Y + origin[1]) + ']');
      }
      if (!e && le && p.length > 1) {
        if (srci.length) { srci += ',\n\t\t'; }
        if (pos.Z != lz) {
          lh = pos.Z - lz;
          layers++;
        }
        srci += 'EX([' + p.join(', ') + '],{w: ' + lh * 1.1 + ', h:' + lh * 1.02 + ', fn:1, closed: false}).translate([0,0,' + pos['Z'] + '])';
        p = [];
        lz = pos.Z;
            // if(layers>2)
            //   break;
      }
      le = e;
      lpos.X = pos.X;
      lpos.Y = pos.Y;
      lpos.Z = pos.Z;
      lpos.E = pos.E;
    }
    ld = d;
  }

  var src = '';
  src += '// producer: OpenJSCAD Compatibility (' + version + ') GCode Importer\n';
  src += '// date: ' + (new Date()) + '\n';
  src += '// source: ' + fn + '\n';
  src += '\n';
   // if(err) src += "// WARNING: import errors: "+err+" (some triangles might be misaligned or missing)\n";
  src += '// layers: ' + layers + '\n';
  src += 'function main() {\n\tvar EX = function(p,opt) { return rectangular_extrude(p,opt); }\n\treturn [';
  src += srci;
  src += '\n\t];\n}\n';
  return src
}

/*
## License

Copyright (c) 2016 Z3 Development https://github.com/z3dev

All code released under MIT license

History:
  2016/10/15: 0.5.2: initial version

Notes:
1) All functions extend other objects in order to maintain namespaces.
*/

// //////////////////////////////////////////
//
// JSON (JavaScript Object Notation) is a lightweight data-interchange format
// See http://json.org/
//
// //////////////////////////////////////////

function toSourceCSGVertex (ver) {
  return 'new CSG.Vertex(new CSG.Vector3D(' + ver._x + ',' + ver._y + ',' + ver._z + '))'
}

// convert the give CSG object to JSCAD source
function toSourceCSG (csg) {
  var code = '  var polygons = [];\n';
  csg.polygons.map(function (p) {
    code += '  poly = new CSG.Polygon([\n';
    for (var i = 0; i < p.vertices.length; i++) {
      code += '                         ' + toSourceCSGVertex(p.vertices[i].pos) + ',\n';
    }
    code += '                         ])';
    if (p.shared && p.shared.color && p.shared.color.length) {
      code += '.setColor(' + JSON.stringify(p.shared.color) + ');\n';
    } else {
      code += ';\n';
    }
    code += '  polygons.push(poly);\n';
  });
  code += '  return CSG.fromPolygons(polygons);\n';
  return code
}

function toSourceCAGVertex (ver) {
  return 'new CAG.Vertex(new CSG.Vector2D(' + ver.pos._x + ',' + ver.pos._y + '))'
}
function toSourceSide (side) {
  return 'new CAG.Side(' + toSourceCAGVertex(side.vertex0) + ',' + toSourceCAGVertex(side.vertex1) + ')'
}

// convert the give CAG object to JSCAD source
function toSourceCAG (cag) {
  var code = '  var sides = [];\n';
  cag.sides.map(function (s) {
    code += '  sides.push(' + toSourceSide(s) + ');\n';
  });
  code += '  return CAG.fromSides(sides);\n';
  return code
}

// convert an anonymous CSG/CAG object to JSCAD source
function toSource (obj) {
  if (obj.type && obj.type === 'csg') {
    var csg = _jscad_csg.CSG.fromObject(obj);
    return toSourceCSG(csg)
  }
  if (obj.type && obj.type === 'cag') {
    var cag = CAG.fromObject(obj);
    return toSourceCAG(cag)
  }
  return ''
}

//
// Parse the given JSON source and return a JSCAD script
//
// fn (optional) original filename of JSON source
//
function parseJSON (src, fn, options) {
  fn = fn || 'amf';
  var defaults = {version: '0.0.0'};
  options = Object.assign({}, defaults, options);
  var version = options.version;

// convert the JSON into an anonymous object
  var obj = JSON.parse(src);
// convert the internal objects to JSCAD code
  var code = '';
  code += '//\n';
  code += '// producer: OpenJSCAD.org ' + version + ' JSON Importer\n';
  code += '// date: ' + (new Date()) + '\n';
  code += '// source: ' + fn + '\n';
  code += '//\n';
  code += 'function main() {\n';
  code += toSource(obj);
  code += '};\n';
  return code
}

// export the extended prototypes
// module.CAG = CAG;

function vt2jscad (v, t, n, c) {     // vertices, triangles, normals and colors
  var src = '';
  src += 'polyhedron({ points: [\n\t';
  for (var i = 0, j = 0; i < v.length; i++) {
    if (j++) { src += ',\n\t'; }
    src += '[' + v[i] + ']'; // .join(", ");
  }
  src += '],\n\tpolygons: [\n\t';
  for (var i = 0, j = 0; i < t.length; i++) {
    if (j++) { src += ',\n\t'; }
    src += '[' + t[i] + ']'; // .join(', ');
  }
  if (c && t.length == c.length) {
    src += '],\n\tcolors: [\n\t';
    for (var i = 0, j = 0; i < c.length; i++) {
      if (j++) { src += ',\n\t'; }
      src += '[' + c[i] + ']'; // .join(', ');
    }
  }
  src += '] })\n';
  return src
}

function parseOBJ (obj, fn, options) {   // http://en.wikipedia.org/wiki/Wavefront_.obj_file
  var defaults = {version: '0.0.0'};
  options = Object.assign({}, defaults, options);
  var version = options.version;

  var l = obj.split(/\n/);
  var v = [], f = [];

  for (var i = 0; i < l.length; i++) {
    var s = l[i];
    var a = s.split(/\s+/);

    if (a[0] == 'v') {
      v.push([a[1], a[2], a[3]]);
    } else if (a[0] == 'f') {
      var fc = [];
      var skip = 0;

      for (var j = 1; j < a.length; j++) {
        var c = a[j];
        c = c.replace(/\/.*$/, '');     // -- if coord# is '840/840' -> 840
        c--;                       // -- starts with 1, but we start with 0
        if (c >= v.length) {
          skip++;
        }
        if (skip == 0) {
          fc.push(c);
        }
      }
         // fc.reverse();
      if (skip == 0) {
        f.push(fc);
      }
    } else {
           // vn vt and all others disregarded
    }
  }
  var src = '';
  src += '// producer: OpenJSCAD Compatibility (' + version + ') Wavefront OBJ Importer\n';
  src += '// date: ' + (new Date()) + '\n';
  src += '// source: ' + fn + '\n';
  src += '\n';
   // if(err) src += "// WARNING: import errors: "+err+" (some triangles might be misaligned or missing)\n";
  src += '// objects: 1\n// object #1: polygons: ' + f.length + '\n\n';
  src += 'function main() { return ';
  src += vt2jscad(v, f);
  src += '; }';
  return src
}

// STL function from http://jsfiddle.net/Riham/yzvGD/35/
// CC BY-SA by Riham
// changes by Rene K. Mueller <spiritdude@gmail.com>
//
// 2013/03/28: lot of rework and debugging included, and error handling
// 2013/03/18: renamed functions, creating .jscad source direct via polyhedron()
var echo = console.info;

function parseSTL (stl, fn, options) {
  var defaults = {version: '0.0.0'};
  options = Object.assign({}, defaults, options);
  var version = options.version;

  var isAscii = true;

  for (var i = 0; i < stl.length; i++) {
    if (stl[i].charCodeAt(0) == 0) {
      isAscii = false;
      break
    }
  }
  var src;
  if (!isAscii) {
    src = parseBinarySTL(stl, fn, version);
  } else {
    src = parseAsciiSTL(stl, fn, version);
  }
  return src
}

function parseBinarySTL (stl, fn, version) {
    // -- This makes more sense if you read http://en.wikipedia.org/wiki/STL_(file_format)#Binary_STL
  var vertices = [];
  var triangles = [];
  var normals = [];
  var colors = [];
  var vertexIndex = 0;
  var converted = 0;
  var err = 0;
  var mcolor = null;
  var umask = parseInt('01000000000000000', 2);
  var rmask = parseInt('00000000000011111', 2);
  var gmask = parseInt('00000001111100000', 2);
  var bmask = parseInt('00111110000000000', 2);
  var br = new BinaryReader(stl);

  var m = 0, c = 0, r = 0, g = 0, b = 0, a = 0;
  for (var i = 0; i < 80; i++) {
    switch (m) {
      case 6:
        r = br.readUInt8();
        m += 1;
        continue
      case 7:
        g = br.readUInt8();
        m += 1;
        continue
      case 8:
        b = br.readUInt8();
        m += 1;
        continue
      case 9:
        a = br.readUInt8();
        m += 1;
        continue
      default:
        c = br.readChar();
        switch (c) {
          case 'C':
          case 'O':
          case 'L':
          case 'R':
          case '=':
            m += 1;
          default:
            break
        }
        break
    }
  }
  if (m == 10) { // create the default color
    mcolor = [r / 255, g / 255, b / 255, a / 255];
  }

  var totalTriangles = br.readUInt32(); // Read # triangles

  for (var tr = 0; tr < totalTriangles; tr++) {
        // if(tr%100==0) status('stl importer: converted '+converted+' out of '+totalTriangles+' triangles');
        /*
             REAL32[3] . Normal vector
             REAL32[3] . Vertex 1
             REAL32[3] . Vertex 2
             REAL32[3] . Vertex 3
                UINT16 . Attribute byte count */
        // -- Parse normal
    var no = []; no.push(br.readFloat()); no.push(br.readFloat()); no.push(br.readFloat());

        // -- Parse every 3 subsequent floats as a vertex
    var v1 = []; v1.push(br.readFloat()); v1.push(br.readFloat()); v1.push(br.readFloat());
    var v2 = []; v2.push(br.readFloat()); v2.push(br.readFloat()); v2.push(br.readFloat());
    var v3 = []; v3.push(br.readFloat()); v3.push(br.readFloat()); v3.push(br.readFloat());

    var skip = 0;
    {
      for (var i = 0; i < 3; i++) {
        if (isNaN(v1[i])) { skip++; }
        if (isNaN(v2[i])) { skip++; }
        if (isNaN(v3[i])) { skip++; }
        if (isNaN(no[i])) { skip++; }
      }
      if (skip > 0) {
        echo('bad triangle vertice coords/normal: ', skip);
      }
    }
    err += skip;
        // -- every 3 vertices create a triangle.
    var triangle = []; triangle.push(vertexIndex++); triangle.push(vertexIndex++); triangle.push(vertexIndex++);

    var abc = br.readUInt16();
    var color = null;
    if (m == 10) {
      var u = (abc & umask); // 0 if color is unique for this triangle
      var r = (abc & rmask) / 31;
      var g = ((abc & gmask) >>> 5) / 31;
      var b = ((abc & bmask) >>> 10) / 31;
      var a = 255;
      if (u == 0) {
        color = [r, g, b, a];
      } else {
        color = mcolor;
      }
      colors.push(color);
    }

        // -- Add 3 vertices for every triangle
        // -- TODO: OPTIMIZE: Check if the vertex is already in the array, if it is just reuse the index
    if (skip == 0) {  // checking cw vs ccw, given all normal/vertice are valid
           // E1 = B - A
           // E2 = C - A
           // test = dot( Normal, cross( E1, E2 ) )
           // test > 0: cw, test < 0 : ccw
      var w1 = new _jscad_csg.CSG.Vector3D(v1);
      var w2 = new _jscad_csg.CSG.Vector3D(v2);
      var w3 = new _jscad_csg.CSG.Vector3D(v3);
      var e1 = w2.minus(w1);
      var e2 = w3.minus(w1);
      var t = new _jscad_csg.CSG.Vector3D(no).dot(e1.cross(e2));
      if (t > 0) {    // 1,2,3 -> 3,2,1
        var tmp = v3;
        v3 = v1;
        v1 = tmp;
      }
    }
    vertices.push(v1);
    vertices.push(v2);
    vertices.push(v3);
    triangles.push(triangle);
    normals.push(no);
    converted++;
  }
  var src = '';
  src += '// producer: OpenJSCAD Compatibility (' + version + ') STL Binary Importer\n';
  src += '// date: ' + (new Date()) + '\n';
  src += '// source: ' + fn + '\n';
  src += '\n';
  if (err) { src += '// WARNING: import errors: ' + err + ' (some triangles might be misaligned or missing)\n'; }
  src += '// objects: 1\n// object #1: triangles: ' + totalTriangles + '\n\n';
  src += 'function main() { return ';
  src += vt2jscad(vertices, triangles, normals, colors);
  src += '; }';
  return src
}

function parseAsciiSTL (stl, fn, version) {
  var src = '';
  var n = 0;
  var converted = 0;
  var o;

  src += '// producer: OpenJSCAD Compatibility (' + version + ') STL ASCII Importer\n';
  src += '// date: ' + (new Date()) + '\n';
  src += '// source: ' + fn + '\n';
  src += '\n';
  src += 'function main() { return union(\n';
    // -- Find all models
  var objects = stl.split('endsolid');
  src += '// objects: ' + (objects.length - 1) + '\n';

  for (o = 1; o < objects.length; o++) {
        // -- Translation: a non-greedy regex for facet {...} endloop pattern
    var patt = /\bfacet[\s\S]*?endloop/mgi;
    var vertices = [];
    var triangles = [];
    var normals = [];
    var vertexIndex = 0;
    var err = 0;

    var match = stl.match(patt);
    if (match == null) { continue }
    for (var i = 0; i < match.length; i++) {
            // if(converted%100==0) status('stl to jscad: converted '+converted+' out of '+match.length+ ' facets');
            // -- 1 normal with 3 numbers, 3 different vertex objects each with 3 numbers:
            // var vpatt = /\bfacet\s+normal\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s*outer\s+loop\s+vertex\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s*vertex\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s*vertex\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)/mgi;
                                         // (-?\d+\.?\d*) -1.21223
                                         // (-?\d+\.?\d*[Ee]?[-+]?\d*)
      var vpatt = /\bfacet\s+normal\s+(\S+)\s+(\S+)\s+(\S+)\s+outer\s+loop\s+vertex\s+(\S+)\s+(\S+)\s+(\S+)\s+vertex\s+(\S+)\s+(\S+)\s+(\S+)\s+vertex\s+(\S+)\s+(\S+)\s+(\S+)\s*/mgi;
      var v = vpatt.exec(match[i]);
      if (v == null) { continue }
      if (v.length != 13) {
        echo('Failed to parse ' + match[i]);
        break
      }
      var skip = 0;
      for (var k = 0; k < v.length; k++) {
        if (v[k] == 'NaN') {
          echo('bad normal or triangle vertice #' + converted + ' ' + k + ": '" + v[k] + "', skipped");
          skip++;
        }
      }
      err += skip;
      if (skip) {
        continue
      }
      if (0 && skip) {
        var j = 1 + 3;
        var v1 = []; v1.push(parseFloat(v[j++])); v1.push(parseFloat(v[j++])); v1.push(parseFloat(v[j++]));
        var v2 = []; v2.push(parseFloat(v[j++])); v2.push(parseFloat(v[j++])); v2.push(parseFloat(v[j++]));
        var v3 = []; v3.push(parseFloat(v[j++])); v3.push(parseFloat(v[j++])); v3.push(parseFloat(v[j++]));
        echo('recalculate norm', v1, v2, v3);
        var w1 = new _jscad_csg.CSG.Vector3D(v1);
        var w2 = new _jscad_csg.CSG.Vector3D(v2);
        var w3 = new _jscad_csg.CSG.Vector3D(v3);
        var _u = w1.minus(w3);
        var _v = w1.minus(w2);
        var norm = _u.cross(_v).unit();
        j = 1;
        v[j++] = norm._x;
        v[j++] = norm._y;
        v[j++] = norm._z;
        skip = false;
      }
      var j = 1;
      var no = []; no.push(parseFloat(v[j++])); no.push(parseFloat(v[j++])); no.push(parseFloat(v[j++]));
      var v1 = []; v1.push(parseFloat(v[j++])); v1.push(parseFloat(v[j++])); v1.push(parseFloat(v[j++]));
      var v2 = []; v2.push(parseFloat(v[j++])); v2.push(parseFloat(v[j++])); v2.push(parseFloat(v[j++]));
      var v3 = []; v3.push(parseFloat(v[j++])); v3.push(parseFloat(v[j++])); v3.push(parseFloat(v[j++]));
      var triangle = []; triangle.push(vertexIndex++); triangle.push(vertexIndex++); triangle.push(vertexIndex++);

            // -- Add 3 vertices for every triangle
            //    TODO: OPTIMIZE: Check if the vertex is already in the array, if it is just reuse the index
      if (skip == 0) {  // checking cw vs ccw
               // E1 = B - A
               // E2 = C - A
               // test = dot( Normal, cross( E1, E2 ) )
               // test > 0: cw, test < 0: ccw
        var w1 = new _jscad_csg.CSG.Vector3D(v1);
        var w2 = new _jscad_csg.CSG.Vector3D(v2);
        var w3 = new _jscad_csg.CSG.Vector3D(v3);
        var e1 = w2.minus(w1);
        var e2 = w3.minus(w1);
        var t = new _jscad_csg.CSG.Vector3D(no).dot(e1.cross(e2));
        if (t > 0) {      // 1,2,3 -> 3,2,1
          var tmp = v3;
          v3 = v1;
          v1 = tmp;
        }
      }
      vertices.push(v1);
      vertices.push(v2);
      vertices.push(v3);
      normals.push(no);
      triangles.push(triangle);
      converted++;
    }
    if (n++) { src += ','; }
    if (err) { src += '// WARNING: import errors: ' + err + ' (some triangles might be misaligned or missing)\n'; }
    src += '// object #' + (o) + ': triangles: ' + match.length + '\n';
    src += vt2jscad(vertices, triangles, normals);
  }
  src += '); }\n';
  return src
}

// BinaryReader
// Refactored by Vjeux <vjeuxx@gmail.com>
// http://blog.vjeux.com/2010/javascript/javascript-binary-reader.html

// Original
// + Jonas Raoni Soares Silva
// @ http://jsfromhell.com/classes/binary-parser [rev. #1]

function BinaryReader (data) {
  this._buffer = data;
  this._pos = 0;
}

BinaryReader.prototype = {

   /* Public */

  readInt8: function () { return this._decodeInt(8, true) },
  readUInt8: function () { return this._decodeInt(8, false) },
  readInt16: function () { return this._decodeInt(16, true) },
  readUInt16: function () { return this._decodeInt(16, false) },
  readInt32: function () { return this._decodeInt(32, true) },
  readUInt32: function () { return this._decodeInt(32, false) },

  readFloat: function () { return this._decodeFloat(23, 8) },
  readDouble: function () { return this._decodeFloat(52, 11) },

  readChar: function () { return this.readString(1) },
  readString: function (length) {
    this._checkSize(length * 8);
    var result = this._buffer.substr(this._pos, length);
    this._pos += length;
    return result
  },

  seek: function (pos) {
    this._pos = pos;
    this._checkSize(0);
  },

  getPosition: function () {
    return this._pos
  },

  getSize: function () {
    return this._buffer.length
  },

   /* Private */

  _decodeFloat: function (precisionBits, exponentBits) {
    var this$1 = this;

    var length = precisionBits + exponentBits + 1;
    var size = length >> 3;
    this._checkSize(length);

    var bias = Math.pow(2, exponentBits - 1) - 1;
    var signal = this._readBits(precisionBits + exponentBits, 1, size);
    var exponent = this._readBits(precisionBits, exponentBits, size);
    var significand = 0;
    var divisor = 2;
    var curByte = 0; // length + (-precisionBits >> 3) - 1;
    do {
      var byteValue = this$1._readByte(++curByte, size);
      var startBit = precisionBits % 8 || 8;
      var mask = 1 << startBit;
      while (mask >>= 1) {
        if (byteValue & mask) {
          significand += 1 / divisor;
        }
        divisor *= 2;
      }
    } while (precisionBits -= startBit)

    this._pos += size;

    return exponent == (bias << 1) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity
         : (1 + signal * -2) * (exponent || significand ? !exponent ? Math.pow(2, -bias + 1) * significand
         : Math.pow(2, exponent - bias) * (1 + significand) : 0)
  },

  _decodeInt: function (bits, signed) {
    var x = this._readBits(0, bits, bits / 8), max = Math.pow(2, bits);
    var result = signed && x >= max / 2 ? x - max : x;

    this._pos += bits / 8;
    return result
  },

   // shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)
  _shl: function (a, b) {
    for (++b; --b; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1){  }
    return a
  },

  _readByte: function (i, size) {
    return this._buffer.charCodeAt(this._pos + size - i - 1) & 0xff
  },

  _readBits: function (start, length, size) {
    var this$1 = this;

    var offsetLeft = (start + length) % 8;
    var offsetRight = start % 8;
    var curByte = size - (start >> 3) - 1;
    var lastByte = size + (-(start + length) >> 3);
    var diff = curByte - lastByte;

    var sum = (this._readByte(curByte, size) >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1);

    if (diff && offsetLeft) {
      sum += (this._readByte(lastByte++, size) & ((1 << offsetLeft) - 1)) << (diff-- << 3) - offsetRight;
    }

    while (diff) {
      sum += this$1._shl(this$1._readByte(lastByte++, size), (diff-- << 3) - offsetRight);
    }

    return sum
  },

  _checkSize: function (neededBits) {
    if (!(this._pos + Math.ceil(neededBits / 8) < this._buffer.length)) {
         // throw new Error("Index out of bound");
    }
  }
};

/*
## License

Copyright (c) 2016 Z3 Development https://github.com/z3dev

All code released under MIT license

Notes:
1) All functions extend other objects in order to maintain namespaces.
*/
var sax$3 = require('sax');

// //////////////////////////////////////////
//
// SVG is a language for describing two-dimensional graphics in XML
// See http://www.w3.org/TR/SVG/Overview.html
//
// //////////////////////////////////////////

// standard pixel size at arms length on 90dpi screens
var cssPxUnit = 0.2822222;

// units for converting CSS2 points/length, i.e. CSS2 value / pxPmm
sax$3.SAXParser.prototype.pxPmm = 1 / 0.2822222;         // used for scaling SVG coordinates(PX) to CAG coordinates(MM)
var inchMM$1 = 1 / (1 / 0.039370);     // used for scaling SVG coordinates(IN) to CAG coordinates(MM)
var ptMM = 1 / (1 / 0.039370 / 72);    // used for scaling SVG coordinates(IN) to CAG coordinates(MM)
var pcMM = 1 / (1 / 0.039370 / 72 * 12); // used for scaling SVG coordinates(PC) to CAG coordinates(MM)

// standard SVG named colors (sRGB values)
var svgColors = {
  'aliceblue': [240, 248, 255],
  'antiquewhite': [250, 235, 215],
  'aqua': [ 0, 255, 255],
  'aquamarine': [127, 255, 212],
  'azure': [240, 255, 255],
  'beige': [245, 245, 220],
  'bisque': [255, 228, 196],
  'black': [ 0, 0, 0],
  'blanchedalmond': [255, 235, 205],
  'blue': [ 0, 0, 255],
  'blueviolet': [138, 43, 226],
  'brown': [165, 42, 42],
  'burlywood': [222, 184, 135],
  'cadetblue': [ 95, 158, 160],
  'chartreuse': [127, 255, 0],
  'chocolate': [210, 105, 30],
  'coral': [255, 127, 80],
  'cornflowerblue': [100, 149, 237],
  'cornsilk': [255, 248, 220],
  'crimson': [220, 20, 60],
  'cyan': [ 0, 255, 255],
  'darkblue': [ 0, 0, 139],
  'darkcyan': [ 0, 139, 139],
  'darkgoldenrod': [184, 134, 11],
  'darkgray': [169, 169, 169],
  'darkgreen': [ 0, 100, 0],
  'darkgrey': [169, 169, 169],
  'darkkhaki': [189, 183, 107],
  'darkmagenta': [139, 0, 139],
  'darkolivegreen': [ 85, 107, 47],
  'darkorange': [255, 140, 0],
  'darkorchid': [153, 50, 204],
  'darkred': [139, 0, 0],
  'darksalmon': [233, 150, 122],
  'darkseagreen': [143, 188, 143],
  'darkslateblue': [ 72, 61, 139],
  'darkslategray': [ 47, 79, 79],
  'darkslategrey': [ 47, 79, 79],
  'darkturquoise': [ 0, 206, 209],
  'darkviolet': [148, 0, 211],
  'deeppink': [255, 20, 147],
  'deepskyblue': [ 0, 191, 255],
  'dimgray': [105, 105, 105],
  'dimgrey': [105, 105, 105],
  'dodgerblue': [ 30, 144, 255],
  'firebrick': [178, 34, 34],
  'floralwhite': [255, 250, 240],
  'forestgreen': [ 34, 139, 34],
  'fuchsia': [255, 0, 255],
  'gainsboro': [220, 220, 220],
  'ghostwhite': [248, 248, 255],
  'gold': [255, 215, 0],
  'goldenrod': [218, 165, 32],
  'gray': [128, 128, 128],
  'grey': [128, 128, 128],
  'green': [ 0, 128, 0],
  'greenyellow': [173, 255, 47],
  'honeydew': [240, 255, 240],
  'hotpink': [255, 105, 180],
  'indianred': [205, 92, 92],
  'indigo': [ 75, 0, 130],
  'ivory': [255, 255, 240],
  'khaki': [240, 230, 140],
  'lavender': [230, 230, 250],
  'lavenderblush': [255, 240, 245],
  'lawngreen': [124, 252, 0],
  'lemonchiffon': [255, 250, 205],
  'lightblue': [173, 216, 230],
  'lightcoral': [240, 128, 128],
  'lightcyan': [224, 255, 255],
  'lightgoldenrodyellow': [250, 250, 210],
  'lightgray': [211, 211, 211],
  'lightgreen': [144, 238, 144],
  'lightgrey': [211, 211, 211],
  'lightpink': [255, 182, 193],
  'lightsalmon': [255, 160, 122],
  'lightseagreen': [ 32, 178, 170],
  'lightskyblue': [135, 206, 250],
  'lightslategray': [119, 136, 153],
  'lightslategrey': [119, 136, 153],
  'lightsteelblue': [176, 196, 222],
  'lightyellow': [255, 255, 224],
  'lime': [ 0, 255, 0],
  'limegreen': [ 50, 205, 50],
  'linen': [250, 240, 230],
  'magenta': [255, 0, 255],
  'maroon': [128, 0, 0],
  'mediumaquamarine': [102, 205, 170],
  'mediumblue': [ 0, 0, 205],
  'mediumorchid': [186, 85, 211],
  'mediumpurple': [147, 112, 219],
  'mediumseagreen': [ 60, 179, 113],
  'mediumslateblue': [123, 104, 238],
  'mediumspringgreen': [ 0, 250, 154],
  'mediumturquoise': [ 72, 209, 204],
  'mediumvioletred': [199, 21, 133],
  'midnightblue': [ 25, 25, 112],
  'mintcream': [245, 255, 250],
  'mistyrose': [255, 228, 225],
  'moccasin': [255, 228, 181],
  'navajowhite': [255, 222, 173],
  'navy': [ 0, 0, 128],
  'oldlace': [253, 245, 230],
  'olive': [128, 128, 0],
  'olivedrab': [107, 142, 35],
  'orange': [255, 165, 0],
  'orangered': [255, 69, 0],
  'orchid': [218, 112, 214],
  'palegoldenrod': [238, 232, 170],
  'palegreen': [152, 251, 152],
  'paleturquoise': [175, 238, 238],
  'palevioletred': [219, 112, 147],
  'papayawhip': [255, 239, 213],
  'peachpuff': [255, 218, 185],
  'peru': [205, 133, 63],
  'pink': [255, 192, 203],
  'plum': [221, 160, 221],
  'powderblue': [176, 224, 230],
  'purple': [128, 0, 128],
  'red': [255, 0, 0],
  'rosybrown': [188, 143, 143],
  'royalblue': [ 65, 105, 225],
  'saddlebrown': [139, 69, 19],
  'salmon': [250, 128, 114],
  'sandybrown': [244, 164, 96],
  'seagreen': [ 46, 139, 87],
  'seashell': [255, 245, 238],
  'sienna': [160, 82, 45],
  'silver': [192, 192, 192],
  'skyblue': [135, 206, 235],
  'slateblue': [106, 90, 205],
  'slategray': [112, 128, 144],
  'slategrey': [112, 128, 144],
  'snow': [255, 250, 250],
  'springgreen': [ 0, 255, 127],
  'steelblue': [ 70, 130, 180],
  'tan': [210, 180, 140],
  'teal': [ 0, 128, 128],
  'thistle': [216, 191, 216],
  'tomato': [255, 99, 71],
  'turquoise': [ 64, 224, 208],
  'violet': [238, 130, 238],
  'wheat': [245, 222, 179],
  'white': [255, 255, 255],
  'whitesmoke': [245, 245, 245],
  'yellow': [255, 255, 0],
  'yellowgreen': [154, 205, 50]
};

// Calculate the CAG length/size from the given SVG value (float)
sax$3.SAXParser.prototype.svg2cagX = function (v) {
  return (v / this.svgUnitsPmm[0])
};

sax$3.SAXParser.prototype.svg2cagY = function (v) {
  return 0 - (v / this.svgUnitsPmm[1])
};

// Calculate the CAG length/size from the given CSS value (string)
sax$3.SAXParser.prototype.cagLengthX = function (css) {
  if (css.indexOf('%') < 0) {
    return this.css2cag(css, this.svgUnitsPmm[0])
  }
// calculate the units as a percentage of the width
  var v = parseFloat(css); // number part
  if (isNaN(v)) { return 0.0 }
  if (v == 0) { return v }
  v = (v / 100) * this.svgUnitsX;
// convert the units to mm
  v = v / this.svgUnitsPmm[0];
  // return v;
  return Math.round(v / -100000) * -100000
};

sax$3.SAXParser.prototype.cagLengthY = function (css) {
  if (css.indexOf('%') < 0) {
    return this.css2cag(css, this.svgUnitsPmm[1])
  }
// calculate the units as a percentage of the width
  var v = parseFloat(css); // number part
  if (isNaN(v)) { return 0.0 }
  if (v == 0) { return v }
  v = (v / 100) * this.svgUnitsY;
// convert the units to mm
  v = v / this.svgUnitsPmm[1];
  // return v;
  return Math.round(v / -100000) * -100000
};

sax$3.SAXParser.prototype.cagLengthP = function (css) {
  if (css.indexOf('%') < 0) {
    return this.css2cag(css, this.svgUnitsPmm[1])
  }
// calculate the units as a percentage of the viewport
  var v = parseFloat(css); // number part
  if (isNaN(v)) { return 0.0 }
  if (v == 0) { return v }
  v = (v / 100) * this.svgUnitsV;
// convert the units to mm
  v = v / this.svgUnitsPmm[0]; // FIXME should this use X units?
  return v
};

sax$3.SAXParser.prototype.css2cag = function (css, unit) {
// console.log('css2cag('+css+','+unit+')');
  var v = parseFloat(css); // number part
  if (isNaN(v)) { return 0.0 }
  if (v == 0) { return v }
  if (css.search(/EM/i) > 0) {
    v = v; // font size
  } else
  if (css.search(/EX/i) > 0) {
    v = v; // x-height of font
  } else
  if (css.search(/MM/i) > 0) {
    v = v; // absolute millimeters
  } else
  if (css.search(/CM/i) > 0) {
    v = (v * 10); // absolute centimeters > millimeters
  } else
  if (css.search(/IN/i) > 0) {
    v = (v / inchMM$1); // absolute inches > millimeters
  } else
  if (css.search(/PT/i) > 0) {
    v = (v / ptMM);   // absolute points > millimeters
  } else
  if (css.search(/PC/i) > 0) {
    v = (v / pcMM);   // absolute picas > millimeters
  } else {
    v = (v / unit);        // absolute pixels(units) > millimeters
  }
// console.log('v ('+v+')');
  return v
};

// convert the SVG color specification to CAG RGB
sax$3.SAXParser.prototype.cagColor = function (value) {
//  var rgb = [0,0,0]; // default is black
  var rgb = null;
  value = value.toLowerCase();
  if (value in svgColors) {
    rgb = svgColors[value];
    rgb = [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255]; // converted to 0.0-1.0 values
  } else {
    if (value[0] == '#') {
      if (value.length == 4) {
      // short HEX specification
        value = '#' + value[1] + value[1] + value[2] + value[2] + value[3] + value[3];
      }
      if (value.length == 7) {
      // HEX specification
        rgb = [ parseInt('0x' + value.slice(1, 3)) / 255,
          parseInt('0x' + value.slice(3, 5)) / 255,
          parseInt('0x' + value.slice(5, 7)) / 255 ];
      }
    } else {
      var pat = /rgb\(.+,.+,.+\)/;
      var s = pat.exec(value);
      if (s !== null) {
      // RGB specification
        s = s[0];
        s = s.slice(s.indexOf('(') + 1, s.indexOf(')'));
        rgb = s.split(',');
        if (s.indexOf('%') > 0) {
        // rgb(#%,#%,#%)
          rgb = [parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2])];
          rgb = [rgb[0] / 100, rgb[1] / 100, rgb[2] / 100]; // converted to 0.0-1.0 values
        } else {
        // rgb(#,#,#)
          rgb = [parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2])];
          rgb = [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255]; // converted to 0.0-1.0 values
        }
      }
    }
  }
  return rgb
};

sax$3.SAXParser.prototype.cssStyle = function (element, name) {
  if ('STYLE' in element) {
    var list = element.STYLE;
    var pat = name + '\\s*:\\s*\\S+;';
    var exp = new RegExp(pat, 'i');
    var v = exp.exec(list);
    if (v !== null) {
      v = v[0];
      var i = v.length;
      while (v[i] != ' ') { i--; }
      v = v.slice(i + 1, v.length - 1);
      return v
    }
  }
  return null
};

sax$3.SAXParser.prototype.svgCore = function (obj, element) {
  if ('ID' in element) { obj.id = element.ID; }
};

sax$3.SAXParser.prototype.svgPresentation = function (obj, element) {
// presentation attributes for all
  if ('DISPLAY' in element) { obj.visible = element.DISPLAY; }
// presentation attributes for solids
  if ('COLOR' in element) { obj.fill = this.cagColor(element.COLOR); }
  if ('OPACITY' in element) { obj.opacity = element.OPACITY; }
  if ('FILL' in element) {
    obj.fill = this.cagColor(element.FILL);
  } else {
    var s = this.cssStyle(element, 'fill');
    if (s !== null) {
      obj.fill = this.cagColor(s);
    }
  }
  if ('FILL-OPACITY' in element) { obj.opacity = element['FILL-OPACITY']; }
// presentation attributes for lines
  if ('STROKE-WIDTH' in element) {
    obj.strokeWidth = element['STROKE-WIDTH'];
  } else {
    var sw = this.cssStyle(element, 'stroke-width');
    if (sw !== null) {
      obj.strokeWidth = sw;
    }
  }
  if ('STROKE' in element) {
    obj.stroke = this.cagColor(element.STROKE);
  } else {
    var s = this.cssStyle(element, 'stroke');
    if (s !== null) {
      obj.stroke = this.cagColor(s);
    }
  }
  if ('STROKE-OPACITY' in element) { obj.strokeOpacity = element['STROKE-OPACITY']; }
};

sax$3.SAXParser.prototype.svgTransforms = function (cag, element) {
  var list = null;
  if ('TRANSFORM' in element) {
    list = element.TRANSFORM;
  } else {
    var s = this.cssStyle(element, 'transform');
    if (s !== null) { list = s; }
  }
  if (list !== null) {
    cag.transforms = [];
    var exp = new RegExp('\\w+\\(.+\\)', 'i');
    var v = exp.exec(list);
    while (v !== null) {
      var s = exp.lastIndex;
      var e = list.indexOf(')') + 1;
      var t = list.slice(s, e); // the transform
      t = t.trim();
    // add the transform to the CAG
    // which are applied in the order provided
      var n = t.slice(0, t.indexOf('('));
      var a = t.slice(t.indexOf('(') + 1, t.indexOf(')')).trim();
      if (a.indexOf(',') > 0) { a = a.split(','); } else { a = a.split(' '); }
      switch (n) {
        case 'translate':
          var o = {translate: [a[0], a[1]]};
          cag.transforms.push(o);
          break
        case 'scale':
          if (a.length == 1) { a.push(a[0]); } // as per SVG
          var o = {scale: [a[0], a[1]]};
          cag.transforms.push(o);
          break
        case 'rotate':
          var o = {rotate: a};
          cag.transforms.push(o);
          break
        // case 'matrix':
        // case 'skewX':
        // case 'skewY':
        default:
          break
      }
    // shorten the list and continue
      list = list.slice(e, list.length);
      v = exp.exec(list);
    }
  }
};

sax$3.SAXParser.prototype.svgSvg = function (element) {
// default SVG with no viewport
  var obj = {type: 'svg', x: 0, y: 0, width: '100%', height: '100%', strokeWidth: '1'};

// default units per mm
  obj.unitsPmm = [this.pxPmm, this.pxPmm];

  if ('PXPMM' in element) {
  // WOW! a supplied value for pixels per milimeter!!!
    obj.pxPmm = element.PXPMM;
    obj.unitsPmm = [obj.pxPmm, obj.pxPmm];
  }
  if ('WIDTH' in element) { obj.width = element.WIDTH; }
  if ('HEIGHT' in element) { obj.height = element.HEIGHT; }
  if ('VIEWBOX' in element) {
    var list = element.VIEWBOX.trim();
    var exp = new RegExp('([\\d\\.\\-]+)[\\s,]+([\\d\\.\\-]+)[\\s,]+([\\d\\.\\-]+)[\\s,]+([\\d\\.\\-]+)', 'i');
    var v = exp.exec(list);
    if (v !== null) {
      obj.viewX = parseFloat(v[1]);
      obj.viewY = parseFloat(v[2]);
      obj.viewW = parseFloat(v[3]);
      obj.viewH = parseFloat(v[4]);
    }
  // apply the viewbox
    if (obj.width.indexOf('%') < 0) {
    // calculate a scaling from width and viewW
      var s = this.css2cag(obj.width, this.pxPmm); // width in millimeters
      s = obj.viewW / s;
    // scale the default units
      // obj.unitsPmm[0] = obj.unitsPmm[0] * s;
      obj.unitsPmm[0] = s;
    } else {
    // scale the default units by the width (%)
      var u = obj.unitsPmm[0] * (parseFloat(obj.width) / 100.0);
      obj.unitsPmm[0] = u;
    }
    if (obj.height.indexOf('%') < 0) {
    // calculate a scaling from height and viewH
      var s = this.css2cag(obj.height, this.pxPmm); // height in millimeters
      s = obj.viewH / s;
    // scale the default units
      // obj.unitsPmm[1] = obj.unitsPmm[1] * s;
      obj.unitsPmm[1] = s;
    } else {
    // scale the default units by the width (%)
      var u = obj.unitsPmm[1] * (parseFloat(obj.height) / 100.0);
      obj.unitsPmm[1] = u;
    }
  } else {
    obj.viewX = 0;
    obj.viewY = 0;
    obj.viewW = 1920 / obj.unitsPmm[0]; // average screen size / pixels per unit
    obj.viewH = 1080 / obj.unitsPmm[1]; // average screen size / pixels per unit
  }
  obj.viewP = Math.sqrt((obj.viewW * obj.viewW) + (obj.viewH * obj.viewH)) / Math.SQRT2;

// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);

  obj.objects = [];
  // console.log(JSON.stringify(obj));
  return obj
};

sax$3.SAXParser.prototype.svgEllipse = function (element) {
  var obj = {type: 'ellipse', cx: '0', cy: '0', rx: '0', ry: '0'};
  if ('CX' in element) { obj.cx = element.CX; }
  if ('CY' in element) { obj.cy = element.CY; }
  if ('RX' in element) { obj.rx = element.RX; }
  if ('RY' in element) { obj.ry = element.RY; }
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);
  return obj
};

sax$3.SAXParser.prototype.svgLine = function (element) {
  var obj = {type: 'line', x1: '0', y1: '0', x2: '0', y2: '0'};
  if ('X1' in element) { obj.x1 = element.X1; }
  if ('Y1' in element) { obj.y1 = element.Y1; }
  if ('X2' in element) { obj.x2 = element.X2; }
  if ('Y2' in element) { obj.y2 = element.Y2; }
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);
  return obj
};

sax$3.SAXParser.prototype.svgListOfPoints = function (list) {
  var points = [];
  var exp = new RegExp('([\\d\\-\\+\\.]+)[\\s,]+([\\d\\-\\+\\.]+)[\\s,]*', 'i');
  list = list.trim();
  var v = exp.exec(list);
  while (v !== null) {
    var point = v[0];
    var next = exp.lastIndex + point.length;
    point = {x: v[1], y: v[2]};
    points.push(point);
    list = list.slice(next, list.length);
    v = exp.exec(list);
  }
  return points
};

sax$3.SAXParser.prototype.svgPolyline = function (element) {
  var obj = {type: 'polyline'};
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);

  if ('POINTS' in element) {
    obj.points = this.svgListOfPoints(element.POINTS);
  }
  return obj
};

sax$3.SAXParser.prototype.svgPolygon = function (element) {
  var obj = {type: 'polygon'};
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);

  if ('POINTS' in element) {
    obj.points = this.svgListOfPoints(element.POINTS);
  }
  return obj
};

sax$3.SAXParser.prototype.svgRect = function (element) {
  var obj = {type: 'rect', x: '0', y: '0', rx: '0', ry: '0', width: '0', height: '0'};

  if ('X' in element) { obj.x = element.X; }
  if ('Y' in element) { obj.y = element.Y; }
  if ('RX' in element) {
    obj.rx = element.RX;
    if (!('RY' in element)) { obj.ry = obj.rx; } // by SVG specification
  }
  if ('RY' in element) {
    obj.ry = element.RY;
    if (!('RX' in element)) { obj.rx = obj.ry; } // by SVG specification
  }
  if (obj.rx != obj.ry) {
    console.log('Warning: Unsupported RECT with RX and RY radius');
  }
  if ('WIDTH' in element) { obj.width = element.WIDTH; }
  if ('HEIGHT' in element) { obj.height = element.HEIGHT; }
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);
  return obj
};

sax$3.SAXParser.prototype.svgCircle = function (element) {
  var obj = {type: 'circle', x: '0', y: '0', radius: '0'};

  if ('CX' in element) { obj.x = element.CX; }
  if ('CY' in element) { obj.y = element.CY; }
  if ('R' in element) { obj.radius = element.R; }
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);
  return obj
};

sax$3.SAXParser.prototype.svgGroup = function (element) {
  var obj = {type: 'group'};
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);

  obj.objects = [];
  return obj
};

//
// Convert the PATH element into object representation
//
sax$3.SAXParser.prototype.svgPath = function (element) {
  var obj = {type: 'path'};
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  // this.svgPresentation(obj,element);

  obj.commands = [];
  if ('D' in element) {
    var co = null; // current command
    var bf = '';

    var i = 0;
    var l = element.D.length;
    while (i < l) {
      var c = element.D[i];
      switch (c) {
      // numbers
      // FIXME support E notation numbers
        case '-':
          if (bf.length > 0) {
            co.p.push(bf);
            bf = '';
          }
          bf += c;
          break
        case '.':
          if (bf.length > 0) {
            if (bf.indexOf('.') >= 0) {
              co.p.push(bf);
              bf = '';
            }
          }
          bf += c;
          break
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          bf += c;
          break
      // commands
        case 'a':
        case 'A':
        case 'c':
        case 'C':
        case 'h':
        case 'H':
        case 'l':
        case 'L':
        case 'v':
        case 'V':
        case 'm':
        case 'M':
        case 'q':
        case 'Q':
        case 's':
        case 'S':
        case 't':
        case 'T':
        case 'z':
        case 'Z':
          if (co !== null) {
            if (bf.length > 0) {
              co.p.push(bf);
              bf = '';
            }
            obj.commands.push(co);
          }
          co = {c: c, p: []};
          break
      // white space
        case ',':
        case ' ':
        case '\n':
          if (co !== null) {
            if (bf.length > 0) {
              co.p.push(bf);
              bf = '';
            }
          }
          break
        default:
          break
      }
      i++;
    }
    if (i == l && co !== null) {
      if (bf.length > 0) {
        co.p.push(bf);
      }
      obj.commands.push(co);
    }
  }
  return obj
};

// generate GROUP with attributes from USE element
// - except X,Y,HEIGHT,WIDTH,XLINK:HREF
// - append translate(x,y) if X,Y available
// deep clone the referenced OBJECT and add to group
// - clone using JSON.parse(JSON.stringify(obj))
sax$3.SAXParser.prototype.svgUse = function (element) {
  var obj = {type: 'group'};
// transforms
  this.svgTransforms(obj, element);
// core attributes
  this.svgCore(obj, element);
// presentation attributes
  this.svgPresentation(obj, element);

  if ('X' in element && 'Y' in element) {
    if (!('transforms' in obj)) { obj.transforms = []; }
    var o = {translate: [element.X, element.Y]};
    obj.transforms.push(o);
  }

  obj.objects = [];
  if ('XLINK:HREF' in element) {
  // lookup the named object
    var ref = element['XLINK:HREF'];
    if (ref[0] == '#') { ref = ref.slice(1, ref.length); }
    if (this.svgObjects[ref] !== undefined) {
      ref = this.svgObjects[ref];
      ref = JSON.parse(JSON.stringify(ref));
      obj.objects.push(ref);
    }
  }
  return obj
};

// processing controls
sax$3.SAXParser.prototype.svgObjects = [];    // named objects
sax$3.SAXParser.prototype.svgGroups = [];    // groups of objects
sax$3.SAXParser.prototype.svgInDefs = false; // svg DEFS element in process
sax$3.SAXParser.prototype.svgObj = null;  // svg in object form
sax$3.SAXParser.prototype.svgUnitsPmm = [1, 1];
sax$3.SAXParser.prototype.svgUnitsPer = 0;

sax$3.SAXParser.prototype.reflect = function (x, y, px, py) {
  var ox = x - px;
  var oy = y - py;
  if (x == px && y == px) { return [x, y] }
  if (x == px) { return [x, py + (-oy)] }
  if (y == py) { return [px + (-ox), y] }
  return [px + (-ox), py + (-oy)]
};

// Return the value for the given attribute from the group hiearchy
sax$3.SAXParser.prototype.groupValue = function (name) {
  var this$1 = this;

  var i = this.svgGroups.length;
  while (i > 0) {
    var g = this$1.svgGroups[i - 1];
    if (name in g) {
      return g[name]
    }
    i--;
  }
  return null
};

sax$3.SAXParser.prototype.codify = function (group) {
  var this$1 = this;

  var level = this.svgGroups.length;
// add this group to the heiarchy
  this.svgGroups.push(group);
// create an indent for the generated code
  var indent = '  ';
  var i = level;
  while (i > 0) {
    indent += '  ';
    i--;
  }
// pre-code
  var code = '';
  if (level == 0) {
    code += 'function main(params) {\n';
  }
  var ln = 'cag' + level;
  code += indent + 'var ' + ln + ' = new CAG();\n';
// generate code for all objects
  for (i = 0; i < group.objects.length; i++) {
    var obj = group.objects[i];
    var on = ln + i;
    switch (obj.type) {
      case 'group':
        code += this$1.codify(obj);
        code += indent + 'var ' + on + ' = cag' + (level + 1) + ';\n';
        break
      case 'rect':
        var x = this$1.cagLengthX(obj.x);
        var y = (0 - this$1.cagLengthY(obj.y));
        var w = this$1.cagLengthX(obj.width);
        var h = this$1.cagLengthY(obj.height);
        var rx = this$1.cagLengthX(obj.rx);
        var ry = this$1.cagLengthY(obj.ry);
        if (w > 0 && h > 0) {
          x = (x + (w / 2)).toFixed(4);  // position the object via the center
          y = (y - (h / 2)).toFixed(4);  // position the object via the center
          if (rx == 0) {
            code += indent + 'var ' + on + ' = CAG.rectangle({center: [' + x + ',' + y + '], radius: [' + w / 2 + ',' + h / 2 + ']});\n';
          } else {
            code += indent + 'var ' + on + ' = CAG.roundedRectangle({center: [' + x + ',' + y + '], radius: [' + w / 2 + ',' + h / 2 + '], roundradius: ' + rx + '});\n';
          }
        }
        break
      case 'circle':
        var x = this$1.cagLengthX(obj.x);
        var y = (0 - this$1.cagLengthY(obj.y));
        var r = this$1.cagLengthP(obj.radius);
        if (r > 0) {
          code += indent + 'var ' + on + ' = CAG.circle({center: [' + x + ',' + y + '], radius: ' + r + '});\n';
        }
        break
      case 'ellipse':
        var rx = this$1.cagLengthX(obj.rx);
        var ry = this$1.cagLengthY(obj.ry);
        var cx = this$1.cagLengthX(obj.cx);
        var cy = (0 - this$1.cagLengthY(obj.cy));
        if (rx > 0 && ry > 0) {
          code += indent + 'var ' + on + ' = CAG.ellipse({center: [' + cx + ',' + cy + '], radius: [' + rx + ',' + ry + ']});\n';
        }
        break
      case 'line':
        var x1 = this$1.cagLengthX(obj.x1);
        var y1 = (0 - this$1.cagLengthY(obj.y1));
        var x2 = this$1.cagLengthX(obj.x2);
        var y2 = (0 - this$1.cagLengthY(obj.y2));
        var r = cssPxUnit; // default
        if ('strokeWidth' in obj) {
          r = this$1.cagLengthP(obj.strokeWidth) / 2;
        } else {
          var v = this$1.groupValue('strokeWidth');
          if (v !== null) {
            r = this$1.cagLengthP(v) / 2;
          }
        }
        code += indent + 'var ' + on + ' = new CSG.Path2D([[' + x1 + ',' + y1 + '],[' + x2 + ',' + y2 + ']],false);\n';
        code += indent + on + ' = ' + on + '.expandToCAG(' + r + ',CSG.defaultResolution2D);\n';
        break
      case 'polygon':
        code += indent + 'var ' + on + ' = new CSG.Path2D([\n';
        var j = 0;
        for (j = 0; j < obj.points.length; j++) {
          var p = obj.points[j];
          if ('x' in p && 'y' in p) {
            var x = this$1.cagLengthX(p.x);
            var y = (0 - this$1.cagLengthY(p.y));
            code += indent + '  [' + x + ',' + y + '],\n';
          }
        }
        code += indent + '],true);\n';
        code += indent + on + ' = ' + on + '.innerToCAG();\n';
        break
      case 'polyline':
        var r = cssPxUnit; // default
        if ('strokeWidth' in obj) {
          r = this$1.cagLengthP(obj.strokeWidth) / 2;
        } else {
          var v = this$1.groupValue('strokeWidth');
          if (v !== null) {
            r = this$1.cagLengthP(v) / 2;
          }
        }
        code += indent + 'var ' + on + ' = new CSG.Path2D([\n';
        var j = 0;
        for (j = 0; j < obj.points.length; j++) {
          var p = obj.points[j];
          if ('x' in p && 'y' in p) {
            var x = this$1.cagLengthX(p.x);
            var y = (0 - this$1.cagLengthY(p.y));
            code += indent + '  [' + x + ',' + y + '],\n';
          }
        }
        code += indent + '],false);\n';
        code += indent + on + ' = ' + on + '.expandToCAG(' + r + ',CSG.defaultResolution2D);\n';
        break
      case 'path':
        code += indent + 'var ' + on + ' = new CAG();\n';

        var r = cssPxUnit; // default
        if ('strokeWidth' in obj) {
          r = this$1.cagLengthP(obj.strokeWidth) / 2;
        } else {
          var v = this$1.groupValue('strokeWidth');
          if (v !== null) {
            r = this$1.cagLengthP(v) / 2;
          }
        }
      // Note: All values are SVG values
        var sx = 0;     // starting position
        var sy = 0;
        var cx = 0;     // current position
        var cy = 0;
        var pi = 0;     // current path index
        var pn = on + pi; // current path name
        var pc = false; // current path closed
        var bx = 0;     // 2nd control point from previous C command
        var by = 0;     // 2nd control point from previous C command
        var qx = 0;     // 2nd control point from previous Q command
        var qy = 0;     // 2nd control point from previous Q command
        var j = 0;
        for (j = 0; j < obj.commands.length; j++) {
          var co = obj.commands[j];
          var pts = co.p;
          // console.log('postion: ['+cx+','+cy+'] before '+co.c);
          switch (co.c) {
            case 'm': // relative move to X,Y
            // special case, if at beginning of path then treat like absolute M
              if (j == 0) {
                cx = 0; cy = 0;
              }
            // close the previous path
              if (pi > 0 && pc === false) {
                code += indent + pn + ' = ' + pn + '.expandToCAG(' + r + ',CSG.defaultResolution2D);\n';
              }
            // open a new path
              if (pts.length >= 2) {
                cx = cx + parseFloat(pts.shift());
                cy = cy + parseFloat(pts.shift());
                pi++;
                pn = on + pi;
                pc = false;
                code += indent + 'var ' + pn + ' = new CSG.Path2D([[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']],false);\n';
                sx = cx; sy = cy;
              }
              break
              break
            case 'M': // absolute move to X,Y
            // close the previous path
              if (pi > 0 && pc === false) {
                code += indent + pn + ' = ' + pn + '.expandToCAG(' + r + ',CSG.defaultResolution2D);\n';
              }
            // open a new path
              if (pts.length >= 2) {
                cx = parseFloat(pts.shift());
                cy = parseFloat(pts.shift());
                pi++;
                pn = on + pi;
                pc = false;
                code += indent + 'var ' + pn + ' = new CSG.Path2D([[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']],false);\n';
                sx = cx; sy = cy;
              }
              break
            case 'a': // relative elliptical arc
              while (pts.length >= 7) {
                var rx = parseFloat(pts.shift());
                var ry = parseFloat(pts.shift());
                var ro = 0 - parseFloat(pts.shift());
                var lf = (pts.shift() == '1');
                var sf = (pts.shift() == '1');
                cx = cx + parseFloat(pts.shift());
                cy = cy + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendArc([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + '],{xradius: ' + this$1.svg2cagX(rx) + ',yradius: ' + this$1.svg2cagY(ry) + ',xaxisrotation: ' + ro + ',clockwise: ' + sf + ',large: ' + lf + '});\n';
              }
              break
            case 'A': // absolute elliptical arc
              while (pts.length >= 7) {
                var rx = parseFloat(pts.shift());
                var ry = parseFloat(pts.shift());
                var ro = 0 - parseFloat(pts.shift());
                var lf = (pts.shift() == '1');
                var sf = (pts.shift() == '1');
                cx = parseFloat(pts.shift());
                cy = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendArc([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + '],{xradius: ' + this$1.svg2cagX(rx) + ',yradius: ' + this$1.svg2cagY(ry) + ',xaxisrotation: ' + ro + ',clockwise: ' + sf + ',large: ' + lf + '});\n';
              }
              break
            case 'c': // relative cubic Bézier
              while (pts.length >= 6) {
                var x1 = cx + parseFloat(pts.shift());
                var y1 = cy + parseFloat(pts.shift());
                bx = cx + parseFloat(pts.shift());
                by = cy + parseFloat(pts.shift());
                cx = cx + parseFloat(pts.shift());
                cy = cy + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(x1) + ',' + this$1.svg2cagY(y1) + '],[' + this$1.svg2cagX(bx) + ',' + this$1.svg2cagY(by) + '],[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']]);\n';
                var rf = this$1.reflect(bx, by, cx, cy);
                bx = rf[0];
                by = rf[1];
              }
              break
            case 'C': // absolute cubic Bézier
              while (pts.length >= 6) {
                var x1 = parseFloat(pts.shift());
                var y1 = parseFloat(pts.shift());
                bx = parseFloat(pts.shift());
                by = parseFloat(pts.shift());
                cx = parseFloat(pts.shift());
                cy = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(x1) + ',' + this$1.svg2cagY(y1) + '],[' + this$1.svg2cagX(bx) + ',' + this$1.svg2cagY(by) + '],[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']]);\n';
                var rf = this$1.reflect(bx, by, cx, cy);
                bx = rf[0];
                by = rf[1];
              }
              break
            case 'q': // relative quadratic Bézier
              while (pts.length >= 4) {
                qx = cx + parseFloat(pts.shift());
                qy = cy + parseFloat(pts.shift());
                cx = cx + parseFloat(pts.shift());
                cy = cy + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']]);\n';
                var rf = this$1.reflect(qx, qy, cx, cy);
                qx = rf[0];
                qy = rf[1];
              }
              break
            case 'Q': // absolute quadratic Bézier
              while (pts.length >= 4) {
                qx = parseFloat(pts.shift());
                qy = parseFloat(pts.shift());
                cx = parseFloat(pts.shift());
                cy = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']]);\n';
                var rf = this$1.reflect(qx, qy, cx, cy);
                qx = rf[0];
                qy = rf[1];
              }
              break
            case 't': // relative quadratic Bézier shorthand
              while (pts.length >= 2) {
                cx = cx + parseFloat(pts.shift());
                cy = cy + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + cx + ',' + cy + ']]);\n';
                var rf = this$1.reflect(qx, qy, cx, cy);
                qx = rf[0];
                qy = rf[1];
              }
              break
            case 'T': // absolute quadratic Bézier shorthand
              while (pts.length >= 2) {
                cx = parseFloat(pts.shift());
                cy = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + this$1.svg2cagX(qx) + ',' + this$1.svg2cagY(qy) + '],[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']]);\n';
                var rf = this$1.reflect(qx, qy, cx, cy);
                qx = rf[0];
                qy = rf[1];
              }
              break
            case 's': // relative cubic Bézier shorthand
              while (pts.length >= 4) {
                var x1 = bx; // reflection of 2nd control point from previous C
                var y1 = by; // reflection of 2nd control point from previous C
                bx = cx + parseFloat(pts.shift());
                by = cy + parseFloat(pts.shift());
                cx = cx + parseFloat(pts.shift());
                cy = cy + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(x1) + ',' + this$1.svg2cagY(y1) + '],[' + this$1.svg2cagX(bx) + ',' + this$1.svg2cagY(by) + '],[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']]);\n';
                var rf = this$1.reflect(bx, by, cx, cy);
                bx = rf[0];
                by = rf[1];
              }
              break
            case 'S': // absolute cubic Bézier shorthand
              while (pts.length >= 4) {
                var x1 = bx; // reflection of 2nd control point from previous C
                var y1 = by; // reflection of 2nd control point from previous C
                bx = parseFloat(pts.shift());
                by = parseFloat(pts.shift());
                cx = parseFloat(pts.shift());
                cy = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendBezier([[' + this$1.svg2cagX(x1) + ',' + this$1.svg2cagY(y1) + '],[' + this$1.svg2cagX(bx) + ',' + this$1.svg2cagY(by) + '],[' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']]);\n';
                var rf = this$1.reflect(bx, by, cx, cy);
                bx = rf[0];
                by = rf[1];
              }
              break
            case 'h': // relative Horzontal line to
              while (pts.length >= 1) {
                cx = cx + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendPoint([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']);\n';
              }
              break
            case 'H': // absolute Horzontal line to
              while (pts.length >= 1) {
                cx = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendPoint([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']);\n';
              }
              break
            case 'l': // relative line to
              while (pts.length >= 2) {
                cx = cx + parseFloat(pts.shift());
                cy = cy + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendPoint([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']);\n';
              }
              break
            case 'L': // absolute line to
              while (pts.length >= 2) {
                cx = parseFloat(pts.shift());
                cy = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendPoint([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']);\n';
              }
              break
            case 'v': // relative Vertical line to
              while (pts.length >= 1) {
                cy = cy + parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendPoint([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']);\n';
              }
              break
            case 'V': // absolute Vertical line to
              while (pts.length >= 1) {
                cy = parseFloat(pts.shift());
                code += indent + pn + ' = ' + pn + '.appendPoint([' + this$1.svg2cagX(cx) + ',' + this$1.svg2cagY(cy) + ']);\n';
              }
              break
            case 'z': // close current line
            case 'Z':
              code += indent + pn + ' = ' + pn + '.close();\n';
              code += indent + pn + ' = ' + pn + '.innerToCAG();\n';
              code += indent + on + ' = ' + on + '.union(' + pn + ');\n';
              cx = sx; cy = sy; // return to the starting point
              pc = true;
              break
            default:
              console.log('Warning: Unknow PATH command [' + co.c + ']');
              break
          }
          // console.log('postion: ['+cx+','+cy+'] after '+co.c);
        }
        if (pi > 0) {
          if (pc === false) {
            code += indent + pn + ' = ' + pn + '.expandToCAG(' + r + ',CSG.defaultResolution2D);\n';
            code += indent + on + ' = ' + on + '.union(' + pn + ');\n';
          }
        }
        break
      default:
        break
    }
    if ('fill' in obj) {
    // FIXME when CAG supports color
    //  code += indent+on+' = '+on+'.setColor(['+obj.fill[0]+','+obj.fill[1]+','+obj.fill[2]+']);\n';
    }
    if ('transforms' in obj) {
    // NOTE: SVG specifications require that transforms are applied in the order given.
    //       But these are applied in the order as required by CSG/CAG
      var tr = null;
      var ts = null;
      var tt = null;

      var j = 0;
      for (j = 0; j < obj.transforms.length; j++) {
        var t = obj.transforms[j];
        if ('rotate' in t) { tr = t; }
        if ('scale' in t) { ts = t; }
        if ('translate' in t) { tt = t; }
      }
      if (ts !== null) {
        var x = ts.scale[0];
        var y = ts.scale[1];
        code += indent + on + ' = ' + on + '.scale([' + x + ',' + y + ']);\n';
      }
      if (tr !== null) {
        var z = 0 - tr.rotate;
        code += indent + on + ' = ' + on + '.rotateZ(' + z + ');\n';
      }
      if (tt !== null) {
        var x = this$1.cagLengthX(tt.translate[0]);
        var y = (0 - this$1.cagLengthY(tt.translate[1]));
        code += indent + on + ' = ' + on + '.translate([' + x + ',' + y + ']);\n';
      }
    }
    code += indent + ln + ' = ' + ln + '.union(' + on + ');\n';
  }
// post-code
  if (level == 0) {
    code += indent + 'return ' + ln + ';\n';
    code += '}\n';
  }
// remove this group from the hiearchy
  this.svgGroups.pop();

  return code
};

function createSvgParser (src, pxPmm) {
// create a parser for the XML
  var parser = sax$3.parser(false, {trim: true, lowercase: false, position: true});
  if (pxPmm !== undefined) {
    if (pxPmm > parser.pxPmm) { parser.pxPmm = pxPmm; }
  }
// extend the parser with functions
  parser.onerror = function (e) {
    console.log('error: line ' + e.line + ', column ' + e.column + ', bad character [' + e.c + ']');
  };

  // parser.ontext = function (t) {
  // };

  parser.onopentag = function (node) {
    // console.log('opentag: '+node.name+' at line '+this.line+' position '+this.column);
    // for (x in node.attributes) {
    //  console.log('    '+x+'='+node.attributes[x]);
    // }
    var obj = null;
    switch (node.name) {
      case 'SVG':
        obj = this.svgSvg(node.attributes);
        break
      case 'G':
        obj = this.svgGroup(node.attributes);
        break
      case 'RECT':
        obj = this.svgRect(node.attributes);
        break
      case 'CIRCLE':
        obj = this.svgCircle(node.attributes);
        break
      case 'ELLIPSE':
        obj = this.svgEllipse(node.attributes);
        break
      case 'LINE':
        obj = this.svgLine(node.attributes);
        break
      case 'POLYLINE':
        obj = this.svgPolyline(node.attributes);
        break
      case 'POLYGON':
        obj = this.svgPolygon(node.attributes);
        break
      // case 'SYMBOL':
      // this is just like an embedded SVG but does NOT render directly, only named
      // this requires another set of control objects
      // only add to named objects for later USE
      //  break;
      case 'PATH':
        obj = this.svgPath(node.attributes);
        break
      case 'USE':
        obj = this.svgUse(node.attributes);
        break
      case 'DEFS':
        this.svgInDefs = true;
        break
      case 'DESC':
      case 'TITLE':
      case 'STYLE':
      // ignored by design
        break
      default:
        console.log('Warning: Unsupported SVG element: ' + node.name);
        break
    }

    if (obj !== null) {
    // add to named objects if necessary
      if ('id' in obj) {
        this.svgObjects[obj.id] = obj;
        // console.log('saved object ['+obj.id+','+obj.type+']');
      }
      if (obj.type == 'svg') {
      // initial SVG (group)
        this.svgGroups.push(obj);
        this.svgUnitsPmm = obj.unitsPmm;
        this.svgUnitsX = obj.viewW;
        this.svgUnitsY = obj.viewH;
        this.svgUnitsV = obj.viewP;
      } else {
      // add the object to the active group if necessary
        if (this.svgGroups.length > 0 && this.svgInDefs == false) {
          var group = this.svgGroups.pop();
          if ('objects' in group) {
            // console.log('push object ['+obj.type+']');
            // console.log(JSON.stringify(obj));
          // TBD apply presentation attributes from the group
            group.objects.push(obj);
          }
          this.svgGroups.push(group);
        }
        if (obj.type == 'group') {
        // add GROUPs to the stack
          this.svgGroups.push(obj);
        }
      }
    }
  };

  parser.onclosetag = function (node) {
    // console.log('closetag: '+node);
    var obj = null;
    switch (node) {
      case 'SVG':
        obj = this.svgGroups.pop();
        // console.log("groups: "+groups.length);
        break
      case 'DEFS':
        this.svgInDefs = false;
        break
      case 'USE':
        obj = this.svgGroups.pop();
        // console.log("groups: "+groups.length);
        break
      case 'G':
        obj = this.svgGroups.pop();
        // console.log("groups: "+groups.length);
        break
      default:
        break
    }
  // check for completeness
    if (this.svgGroups.length === 0) {
      this.svgObj = obj;
    }
  };

  // parser.onattribute = function (attr) {
  // };

  parser.onend = function () {
  //  console.log('SVG parsing completed');
  };
// start the parser
  parser.write(src).close();

  return parser
}

//
// Parse the given SVG source and return a JSCAD script
//
// fn (optional) original filename of SVG source
// options (optional) anonymous object with:
//   pxPmm: pixels per milimeter for calcuations
//
function parseSVG (src, fn, options) {
  var fn = fn || 'svg';
  var defaults = {pxPmm: undefined, version: '0.0.0'};
  options = Object.assign({}, defaults, options);
  var version = options.version;
  var pxPmm = options.pxPmm;

  // parse the SVG source
  var parser = createSvgParser(src, pxPmm);
  // convert the internal objects to JSCAD code
  var code = '';
  code += '//\n';
  code += '// producer: OpenJSCAD.org ' + version + ' SVG Importer\n';
  code += '// date: ' + (new Date()) + '\n';
  code += '// source: ' + fn + '\n';
  code += '//\n';
  if (parser.svgObj !== null) {
    // console.log(JSON.stringify(parser.svgObj));
    code += parser.codify(parser.svgObj);
  } else {
    console.log('Warning: SVG parsing failed');
  }
  return code
}

exports.makeBlob = makeBlob;
exports.revokeBlobUrl = revokeBlobUrl;
exports.CAGToDxf = CAGToDxf;
exports.CAGToJson = CAGToJson;
exports.CAGToSvg = CAGToSvg;
exports.CSGToAMF = CSGToAMF;
exports.CSGToJson = CSGToJson;
exports.CSGToStla = CSGToStla;
exports.CSGToStlb = CSGToStlb;
exports.CSGToX3D = CSGToX3D;
exports.parseAMF = parseAMF;
exports.parseGCode = parseGCode;
exports.parseJSON = parseJSON;
exports.parseOBJ = parseOBJ;
exports.parseSTL = parseSTL;
exports.parseSVG = parseSVG;
//# sourceMappingURL=index.js.map
